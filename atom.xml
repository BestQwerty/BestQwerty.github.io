<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LjJiaJun&#39; Home</title>
  
  <subtitle>书青春 - 话人生 | Coding - Thinking - Acting</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="ctguljj.github.io/"/>
  <updated>2019-03-12T13:44:33.319Z</updated>
  <id>ctguljj.github.io/</id>
  
  <author>
    <name>LjJiaJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++输入输出</title>
    <link href="ctguljj.github.io/2019/03/12/c-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA-1/"/>
    <id>ctguljj.github.io/2019/03/12/c-输入输出-1/</id>
    <published>2019-03-12T09:12:43.000Z</published>
    <updated>2019-03-12T13:44:33.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="getline函数"><a href="#getline函数" class="headerlink" title="getline函数"></a>getline函数</h1><div class="note primary"><p>C++中有两个getline函数</p></div><ul><li><span id="inline-toc">1.</span>一个是在string头文件中，定义的是一个全局的函数,函数声明是<ul><li><code>istream&amp; getline ( istream &amp;is , string &amp;str , char delim );</code><br><code>istream&amp; getline ( istream&amp; is, string&amp; str);</code><ul><li>is 进行读入操作的输入流</li><li>str 存储读入的内容</li><li>delim 终结符</li></ul></li><li>对于第一个函数delim是可以由用户自己定义的终结符；对于第二个函数delim默认为 ‘\n’（换行符）。</li><li>在遇到终结符delim后，delim会被丢弃，不存入str中。在下次读入操作时，将在delim的下个字符开始读入。</li><li>这个getline是个全局函数，而不是istream/iostream的成员函数getline。</li></ul></li><li><span id="inline-toc">2.</span> 另一个则是istream的成员函数，函数声明是<ul><li><code>istream&amp; getline (char* s, streamsize n )</code></li><li><code>istream&amp; getline (char* s, streamsize n, char delim );</code></li><li>注意这个getline是将读取的字符串存储在char数组中而不可以将该参数声明为string类型，因为C++编译器无法执行此默认转换。！</li><li>输入过程中达到n个数或者提前遇到delim，或者文件结束，输入结束</li></ul></li></ul><ul><li><div class="note default"><p>下面看看就行，待续</p></div></li></ul><p>1、getline读取换行符 并且将换行符替换成’\0’，并且会丢弃换行符，对于getline函数，在函数遇到和结束定界符相等的字符时函数结束，同时函数抽出定界符，此种情况下该定界符既不被放回输入流，也不被放入要生成的字符串</p><p>2、cin会把换行符留在输入队列中</p><p>3、cin.getline读取换行符并替换成’\0’，并且不会主动丢弃换行符，会把它留在输入队列中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;getline函数&quot;&gt;&lt;a href=&quot;#getline函数&quot; class=&quot;headerlink&quot; title=&quot;getline函数&quot;&gt;&lt;/a&gt;getline函数&lt;/h1&gt;&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;C++中有两个getline函数
      
    
    </summary>
    
      <category term="输入输出" scheme="ctguljj.github.io/categories/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    
      <category term="c++" scheme="ctguljj.github.io/categories/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/c/"/>
    
    
      <category term="输入输出" scheme="ctguljj.github.io/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>Dev的秘密</title>
    <link href="ctguljj.github.io/2019/03/11/Dev%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>ctguljj.github.io/2019/03/11/Dev的秘密/</id>
    <published>2019-03-11T14:25:50.000Z</published>
    <updated>2019-03-11T14:29:19.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dev快捷键"><a href="#dev快捷键" class="headerlink" title="dev快捷键"></a>dev快捷键</h1><ul><li>按下Ctrl+Shift+A，会看到DEV帮你整理好了代码。</li><li>Ctrl + shift + 方向键上或下<br>会选中光标当前所在的行，然后将这个行进行上移或下移，移动操作不会覆盖上下相邻的行，只是将位置进行对调。（eclipse则是在嵌套的方法之间做跳转，VS2013没有效果）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dev快捷键&quot;&gt;&lt;a href=&quot;#dev快捷键&quot; class=&quot;headerlink&quot; title=&quot;dev快捷键&quot;&gt;&lt;/a&gt;dev快捷键&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;按下Ctrl+Shift+A，会看到DEV帮你整理好了代码。&lt;/li&gt;
&lt;li&gt;Ctrl + s
      
    
    </summary>
    
      <category term="Dev" scheme="ctguljj.github.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="ctguljj.github.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>迭代器</title>
    <link href="ctguljj.github.io/2019/03/11/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>ctguljj.github.io/2019/03/11/迭代器/</id>
    <published>2019-03-11T05:19:55.000Z</published>
    <updated>2019-03-11T10:33:45.577Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在STL定义的容器中，string，vector与deque提供了随机访问迭代器，list、set、multiset、map、multimap提供了双向迭代器。 </li><li>能进行算术运算的迭代器只有随即访问迭代器，要求容器元素存储在连续内存空间里，vector，string，deque的迭代器是有加减法的，但是map，set，multimap,multiset的迭代器是没有加减法的，list也不可以,map等的迭代器不支持加减操作，仅有++itr，–itr这些操作来进行选择</li><li>Bidirectional迭代器：是在前向迭代器的基础上，多了单步向后遍历的能力。也就是–iter,iter–。</li><li>Random Access迭代器：在双向迭代器基础上，具有直接访问各数据元素的能力。随机迭代器增加了“迭代器算术运算”：</li><li>所有迭代器都应该实现自增算符：iter++,++iter</li><li>STL 中的容器适配器有 stack、queue、priority_queue 三种。它们都是在顺序容器的基础上实现的，屏蔽了顺序容器的一部分功能，突出或增加了另外一些功能。容器适配器是没有迭代器的，因此 STL 中的各种排序、查找、变序等算法都不适用于容器适配器。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在STL定义的容器中，string，vector与deque提供了随机访问迭代器，list、set、multiset、map、multimap提供了双向迭代器。 &lt;/li&gt;
&lt;li&gt;能进行算术运算的迭代器只有随即访问迭代器，要求容器元素存储在连续内存空间里，ve
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="迭代器" scheme="ctguljj.github.io/categories/stl/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>string</title>
    <link href="ctguljj.github.io/2019/03/10/string/"/>
    <id>ctguljj.github.io/2019/03/10/string/</id>
    <published>2019-03-10T14:53:23.000Z</published>
    <updated>2019-03-10T14:56:58.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a, b;</span><br><span class="line">.....</span><br><span class="line">a = a + b;<span class="comment">//将a+b前后连接，对于string来说有些符号重载定义</span></span><br><span class="line"><span class="comment">// ‘ + ’暂且理解为前后连接，所以前后不同，结果不同</span></span><br><span class="line"><span class="comment">//string作为容器，可以和字符串、字符相加，也可以和string相加</span></span><br><span class="line"><span class="comment">//具体原因不知道</span></span><br><span class="line"><span class="comment">//待续</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;string&quot;&gt;&lt;a href=&quot;#string&quot; class=&quot;headerlink&quot; title=&quot;string&quot;&gt;&lt;/a&gt;string&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="string" scheme="ctguljj.github.io/categories/stl/string/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>高精度算法</title>
    <link href="ctguljj.github.io/2019/03/10/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>ctguljj.github.io/2019/03/10/高精度算法/</id>
    <published>2019-03-10T08:10:39.000Z</published>
    <updated>2019-03-12T05:05:06.435Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>前言:由于计算机运算是有模运算,数据范围的表示有一定限制,如整型int(C++中int 与long相同)表达范围是(-2^31~2^31-1),unsigned long(无符号整数)是(0~2^32-1),都约为几十亿.如果采用实数型,则能保存最大的double只能提供15~16位的有效数字,即只能精确表达数百万亿的数.因此,在计算位数超过十几位的数时,不能采用现有类型,只能自己编程计算.</p></li><li><p>由于数计算时可能要进位,因此为了方便,将数由低位到高位依次存在数组下标对应由低到高位置上,另外,我们申请数组大小时,一般考虑了最大的情况,在很多情况下,表示有富余,即高位有很多0,可能造成无效的运算和判断,因此,我们一般将数组的第0个下标对应位置来存储该数的位数.如数:3485(三千四百八十五)，表达在数组a[10]上情况是:</p></li><li><p>下标　　0  　 1　   2   　3   　　4 　  5    6    7    8    9<br>内容　　4   　5  　 8   　4   　　3  　 0    0    0    0    0</p><pre><code>说明：位数   个位  十位  百位　千位</code></pre></li><li><p><strong>倒序存储</strong></p></li><li><p>面对高精度类型的题我们只需要像竖式一样从低位到高位计算，最后进行处理</p></li><li><p>注：高精度计算时一般用正数，对于负数，通过处理符号位的修正，在程序实现上用一个变量来存储符号位，用另一个数组存差的绝对值，置符号位：判断被减数是否大于减数：大则将符号位置为空；小则将符号位置为“- ”，交换减数与被减数；</p></li><li><p>memset可用fill代替</p></li><li>在以后的学习中为了加快计算速度,也可用数组的一个元素表示数的多位数字(该内容可以进一步优化<a href="https://baike.baidu.com/item/高精度计算/2671214#2" target="_blank" rel="noopener">一个链接</a>)<ul><li>以下的方法的有明显的缺点：<ul><li>（1）浪费空间：一个整型变量（-32768~32767）只存放一位（0~9）；</li><li>（2）浪费时间：一次加减只处理一位；</li><li>针对以上问题，如下优化：一个数组元素存放四位数；（integer的最大范围是32767，5位的话可能导致出界）将标准数组改为紧缩数组</li></ul></li></ul></li></ul><h1 id="高精度数的存储"><a href="#高精度数的存储" class="headerlink" title="高精度数的存储"></a>高精度数的存储</h1><ul><li><p>１．如对数采用的字符串输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>;<span class="comment">//最多100位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[N+<span class="number">1</span>],i;</span><br><span class="line"><span class="built_in">string</span> s1;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1;<span class="comment">//数s1</span></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)); <span class="comment">//数组清0</span></span><br><span class="line">a[<span class="number">0</span>]=s1.length(); <span class="comment">//位数</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++) a[i]=s1[a[<span class="number">0</span>]-i]-<span class="string">'0'</span>;<span class="comment">//将字符转为数字并倒序存储．</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.直接读入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>;<span class="comment">//最多100位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[N+<span class="number">1</span>],i,s,key;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;key;<span class="comment">//数key</span></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)); <span class="comment">//数组清0</span></span><br><span class="line">i=<span class="number">0</span>;<span class="comment">//第0位</span></span><br><span class="line"><span class="keyword">while</span>(key)  <span class="comment">//当key大于0</span></span><br><span class="line">&#123;</span><br><span class="line">  a[++i]=key%<span class="number">10</span>;<span class="comment">//取第i位的数</span></span><br><span class="line">  key=key/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">0</span>]=i; <span class="comment">//共i位数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.直接初始化(用a[]存储)</p><ul><li>初始化为0: <code>memset(a,0,sizeof(a));</code></li><li>初始化为1: <code>memset(a,0,sizeof(a));a[0]=1;a[1]=1;</code></li></ul></li></ul><div class="note warning"><p>以下程序都只写函数，不写完整程序，所有高精度数存储都满足上述约定。(序号为1的)</p></div><h1 id="高精度数的比较"><a href="#高精度数的比较" class="headerlink" title="高精度数的比较"></a>高精度数的比较</h1><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span>   <span class="comment">//比较a和b的大小关系，若a&gt;b则为1，a&lt;b则为-1,a=b则为0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">0</span>]&gt;b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//a的位数大于b则a比b大</span></span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">0</span>]&lt;b[<span class="number">0</span>]) </span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//a的位数小于b则a比b小</span></span><br><span class="line"><span class="keyword">for</span>(i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)  <span class="comment">//从高位到低位比较</span></span><br><span class="line">     &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i]&gt;b[i]) </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i]&lt;b[i])</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//各位都相等则两数相等。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">//清除前缀0，如果结果是空字符串则设为0 </span></span><br><span class="line">   <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="built_in">string</span>&amp; a)</span></span>&#123;</span><br><span class="line">       <span class="keyword">while</span>(a.length()&gt;<span class="number">0</span> &amp;&amp; a[<span class="number">0</span>]==<span class="string">'0'</span>)</span><br><span class="line">           a.erase(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span>(a == <span class="string">""</span>)</span><br><span class="line">         a = <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果a&gt;=b则返回真（如果包含前缀零会被消除） </span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isBigger</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">      clear(a);</span><br><span class="line">      clear(b);</span><br><span class="line">      <span class="keyword">if</span>(a.length() &gt; b.length())</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">if</span>(a.length()==b.length() &amp;&amp; a&gt;=b)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="高精度数的加法"><a href="#高精度数的加法" class="headerlink" title="高精度数的加法"></a>高精度数的加法</h1><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span> <span class="comment">//计算a=a+b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k;</span><br><span class="line">k=a[<span class="number">0</span>]&gt;b[<span class="number">0</span>]?a[<span class="number">0</span>]:b[<span class="number">0</span>]; <span class="comment">//k是a和b中位数最大的一个的位数</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>]+=(a[i]+b[i])/<span class="number">10</span>;  <span class="comment">//若有进位，则先进位</span></span><br><span class="line">    a[i]=(a[i]+b[i])%<span class="number">10</span>;</span><br><span class="line">&#125;  <span class="comment">//计算当前位数字,注意：这条语句与上一条不能交换。</span></span><br><span class="line"><span class="keyword">if</span>(a[k+<span class="number">1</span>]&gt;<span class="number">0</span>) </span><br><span class="line">a[<span class="number">0</span>]=k+<span class="number">1</span>;  <span class="comment">//修正新的a的位数（a+b最多只能的一个进位）</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">a[<span class="number">0</span>]=k;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个高精度正整数加法 a+b </span></span><br><span class="line"> <span class="function"><span class="built_in">string</span> <span class="title">stringAddString</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">     <span class="comment">//1、对位，将两个数补零直到其具有相同长度 </span></span><br><span class="line">     <span class="keyword">while</span>(a.length() &lt; b.length())         </span><br><span class="line">         a = <span class="string">'0'</span> + a;</span><br><span class="line">     <span class="keyword">while</span>(a.length() &gt; b.length())</span><br><span class="line">         b = <span class="string">'0'</span> + b; </span><br><span class="line">     <span class="comment">//2、补零，在开头再加一个0以便进位</span></span><br><span class="line">     a = <span class="string">'0'</span> + a;</span><br><span class="line">     b = <span class="string">'0'</span> + b;</span><br><span class="line">     <span class="comment">//3、从低位开始相加，注意进位</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=a.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">         a[i] = a[i] + b[i] - <span class="string">'0'</span>;</span><br><span class="line">         <span class="keyword">if</span>(a[i] &gt; <span class="string">'9'</span>)&#123;</span><br><span class="line">             a[i] = a[i] - <span class="number">10</span>;</span><br><span class="line">             a[i<span class="number">-1</span>] += <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; </span><br><span class="line">     clear(a);</span><br><span class="line">     <span class="keyword">return</span> a;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h1 id="高精度数的减法"><a href="#高精度数的减法" class="headerlink" title="高精度数的减法"></a>高精度数的减法</h1><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gminus</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span>;<span class="comment">//计算a=a-b，返加符号位0:正数 1:负数</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">int</span> flag,i</span><br><span class="line">  flag=compare(a,b); <span class="comment">//调用比较函数判断大小</span></span><br><span class="line"><span class="keyword">if</span> (falg==<span class="number">0</span>)<span class="comment">//相等</span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  <span class="comment">//若a=b，则a=0,也可在return前加一句a[0]=1,表示是 1位数0</span></span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>) <span class="comment">//大于  </span></span><br><span class="line">  &#123;  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">      &#123; </span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">&#123; </span><br><span class="line">a[i+<span class="number">1</span>]--;</span><br><span class="line"></span><br><span class="line">a[i]+=<span class="number">10</span>;</span><br><span class="line">&#125; <span class="comment">//若不够减则向上借一位</span></span><br><span class="line">        a[i]=a[i]-b[i];</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">while</span>(a[a[<span class="number">0</span>]]==<span class="number">0</span>)</span><br><span class="line">a[<span class="number">0</span>]--; <span class="comment">//修正a的位数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">-1</span>)<span class="comment">//小于  则用a=b-a,返回-1</span></span><br><span class="line">    &#123; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=b[<span class="number">0</span>];i++)   </span><br><span class="line">   &#123;  </span><br><span class="line"><span class="keyword">if</span>(b[i]&lt;a[i])</span><br><span class="line">&#123; </span><br><span class="line">b[i+<span class="number">1</span>]--;</span><br><span class="line">b[i]+=<span class="number">10</span>;</span><br><span class="line">&#125; <span class="comment">//若不够减则向上借一位</span></span><br><span class="line">        a[i]=b[i]-a[i];</span><br><span class="line">&#125;</span><br><span class="line">     a[<span class="number">0</span>]=b[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">while</span>(a[a[<span class="number">0</span>]]==<span class="number">0</span>) </span><br><span class="line">a[<span class="number">0</span>]--; <span class="comment">//修正a的位数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span>两个高精度正整数减法 a-b<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">stringSubString</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">      <span class="keyword">bool</span> aBigger = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//1、对位，将两个数补零直到其具有相同长度 </span></span><br><span class="line">      <span class="keyword">while</span>(a.length() &lt; b.length())         </span><br><span class="line">          a = <span class="string">'0'</span> + a;</span><br><span class="line">     <span class="keyword">while</span>(a.length() &gt; b.length())</span><br><span class="line">          b = <span class="string">'0'</span> + b;  </span><br><span class="line">      <span class="comment">//2、推测结果正负值，调整为前大后小 </span></span><br><span class="line">      <span class="keyword">if</span>(a &lt; b)  </span><br><span class="line">      &#123;  </span><br><span class="line">          aBigger = <span class="literal">false</span>;  </span><br><span class="line">          <span class="built_in">string</span> buf = b;  </span><br><span class="line">          b = a;  </span><br><span class="line">          a = buf;  </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">//3、从低位开始相减，注意借位,注意不用函数string是往后插入，然后从0开始，所以i=a.length()-1;</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=a.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">          <span class="keyword">if</span>(a[i] &gt;= b[i])&#123;</span><br><span class="line">              a[i] = a[i] - (b[i] - <span class="string">'0'</span>);</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              a[i] = a[i] + <span class="number">10</span>;</span><br><span class="line">              a[i<span class="number">-1</span>] -= <span class="number">1</span>;</span><br><span class="line">              a[i] = a[i] - (b[i] - <span class="string">'0'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="comment">//4.字符就是int，字符型运算时是用ASCII码运算，</span></span><br><span class="line"><span class="comment">//所以a[i] - b[i]为ASCII相减，此时不为数字字符，所以加上'0'</span></span><br><span class="line"><span class="comment">//保证a[i]为数字字符（string)!!!!!!!!!!!</span></span><br><span class="line">      clear(a);</span><br><span class="line">      <span class="keyword">if</span>(!aBigger)   </span><br><span class="line">          a = <span class="string">'-'</span> + a;</span><br><span class="line"><span class="comment">//string中因为'-'放在前面，所以输出时在前面，前后连接</span></span><br><span class="line">      <span class="keyword">return</span> a;    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="高精度乘法1-高精度乘单精度数，单精度数是指通常的整型数"><a href="#高精度乘法1-高精度乘单精度数，单精度数是指通常的整型数" class="headerlink" title="高精度乘法1(高精度乘单精度数，单精度数是指通常的整型数)"></a>高精度乘法1(高精度乘单精度数，单精度数是指通常的整型数)</h1><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">multi1</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">long</span>  key)</span> <span class="comment">//a=a*key,key是单精度数  </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k;</span><br><span class="line"><span class="keyword">if</span> (key==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">//单独处理key=0</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">a[i]=a[i]*key;<span class="comment">//先每位乘起来</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>]+=a[i]/<span class="number">10</span>;</span><br><span class="line">a[i]%=<span class="number">10</span>;</span><br><span class="line">&#125; <span class="comment">//进位</span></span><br><span class="line"><span class="comment">//注意上一语句退出时i=a[0]+1</span></span><br><span class="line"><span class="keyword">while</span>(a[i]&gt;<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">a[i+<span class="number">1</span>]=a[i]/<span class="number">10</span>;</span><br><span class="line">a[i]=a[i]%<span class="number">10</span>;</span><br><span class="line">i++;</span><br><span class="line">a[<span class="number">0</span>]++;</span><br><span class="line">&#125;  <span class="comment">//继续处理超过原a[0]位数的进位,修正a的位数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span></p><p>待续</p><h1 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h1><ul><li>算法：按照从高位到低位的顺序，逐位相除。在除到第j位时，该位在接受了来自第j+1位的余数后与除数相除，如果最高位为零，则商的长度减一</li></ul><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>   N  500</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span>  a[N] = &#123;<span class="number">0</span>&#125;, c[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span>  i, k, d, b;</span><br><span class="line">  <span class="keyword">char</span>  a1[N];  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Input 除数:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Input 被除数:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a1);</span><br><span class="line">  k = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; k; i++)  a[i] = a1[k - i - <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">  d = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">  &#123;</span><br><span class="line">     d = d * <span class="number">10</span> + a[i];</span><br><span class="line">     c[i] = d / b;</span><br><span class="line">     d = d % b;      </span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="keyword">while</span>(c[k - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; k &gt; <span class="number">1</span>)  k--;  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"商="</span>);</span><br><span class="line">  <span class="keyword">for</span>(i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)  <span class="built_in">printf</span>(<span class="string">"%d"</span>, c[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n余数=%d"</span>, d);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span></p><p>待续</p><p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;前言:由于计算机运算是有模运算,数据范围的表示有一定限制,如整型int(C++中int 与long相同)表达范围是(-2^31~2^31-1),unsigned long(无符号整数)是(0~2^32-1),都约为几十亿.如果采用实数型,则能保存最大的do
      
    
    </summary>
    
      <category term="算法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="高精度算法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="ctguljj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>char与string转换</title>
    <link href="ctguljj.github.io/2019/03/10/char%E4%B8%8Estring%E8%BD%AC%E6%8D%A2/"/>
    <id>ctguljj.github.io/2019/03/10/char与string转换/</id>
    <published>2019-03-10T03:20:53.000Z</published>
    <updated>2019-03-10T03:40:53.483Z</updated>
    
    <content type="html"><![CDATA[<p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;

      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="string" scheme="ctguljj.github.io/categories/c/string/"/>
    
    
      <category term="c++" scheme="ctguljj.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++find函数</title>
    <link href="ctguljj.github.io/2019/03/09/c-find%E5%87%BD%E6%95%B0/"/>
    <id>ctguljj.github.io/2019/03/09/c-find函数/</id>
    <published>2019-03-09T13:22:53.000Z</published>
    <updated>2019-03-12T10:08:07.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="find函数"><a href="#find函数" class="headerlink" title="find函数"></a>find函数</h1><ul><li><p>find用在容器中更加普遍，而algorithm中其实find函数只是一种</p></li><li><p>C++find函数原型：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"> <span class="title">InputIterator</span> <span class="title">find</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">val</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">while</span> (first!=last) </span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">if</span> (*first==val) <span class="keyword">return</span> first;</span><br><span class="line">     ++first;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line">如果没找到对应的关键元素，会返回end(),最后一个元素的后一位。</span><br></pre></td></tr></table></figure><ul><li>其中，find()算法的前两个参数都是某个容器的迭代器，用于指定查找的起始位置和终止位置；第三个参数就是要查找的内容，它的数据类型跟容器中数据的类型相同。这里需要注意的是，find()算法会利用“==”操作符将这里的目标内容跟容器中的数据元素进行相等比较，以确定某个元素是否符合条件，所以，这里的数据类型必须支持“==”操作符进行相等比较。对于基本数据类型而言，它们已经天然支持无需我们操心，如果是自定义的数据类型，则需要重载“==”操作符以支持相等比较。</li></ul><h2 id="各个容器自己实现的成员函数"><a href="#各个容器自己实现的成员函数" class="headerlink" title="各个容器自己实现的成员函数"></a>各个容器自己实现的成员函数</h2><ul><li>vector没有实现find函数，除此之外，常见容器都实现了自己的find函数，如set，map，string</li><li>String是这一种顺序存储结构，其find函数返回的是下标索引。set,map,multiset,multimap都不是顺序索引的数据结构，所以返回的是迭代器。</li><li>为什么返回的不是索引下标？这是因为索引下标是在数组这种连续存储的数据结构里面常见的，是一种顺序索引；而很多数据结构的存储并非连续的，不能实现顺序索引，为了兼顾所有的数据结构，所以返回的仅仅是指针或是迭代器。<h2 id="如果元素不在"><a href="#如果元素不在" class="headerlink" title="如果元素不在"></a>如果元素不在</h2></li><li>对于返回迭代器的查找，通过判断find（a.begin(),a.end(),value）==a.end()，来判断元素是否存在</li><li>对于string，通过a.find(val)==string::npos判断</li></ul><h1 id="std-map-find"><a href="#std-map-find" class="headerlink" title="std::map::find"></a>std::map::find</h1><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>指向键等于 key 的元素的迭代器。若找不到这种元素，则返回尾后（见 end() ）迭代器。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;find函数&quot;&gt;&lt;a href=&quot;#find函数&quot; class=&quot;headerlink&quot; title=&quot;find函数&quot;&gt;&lt;/a&gt;find函数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;find用在容器中更加普遍，而algorithm中其实find函数只是一种&lt;/p&gt;
&lt;/l
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="常用函数" scheme="ctguljj.github.io/categories/c/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="常用函数" scheme="ctguljj.github.io/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>blog表格</title>
    <link href="ctguljj.github.io/2019/03/09/blog%E8%A1%A8%E6%A0%BC/"/>
    <id>ctguljj.github.io/2019/03/09/blog表格/</id>
    <published>2019-03-09T06:02:45.000Z</published>
    <updated>2019-03-09T06:17:18.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">c</td><td style="text-align:center">d</td></tr></tbody></table><ul><li><p><strong>|、-、:</strong>之间的多余空格会被忽略，不影响布局。<br>默认标题栏居中对齐，内容居左对齐。</p><ul><li>-:表示内容和标题栏居右对齐</li><li>:-表示内容和标题栏居左对齐</li><li>:-:表示内容和标题栏居中对齐。</li></ul></li><li>内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;a&lt;/th&gt;
&lt;th style=&quot;text
      
    
    </summary>
    
      <category term="blog" scheme="ctguljj.github.io/categories/blog/"/>
    
      <category term="表格" scheme="ctguljj.github.io/categories/blog/%E8%A1%A8%E6%A0%BC/"/>
    
    
      <category term="blog" scheme="ctguljj.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>vector简介</title>
    <link href="ctguljj.github.io/2019/03/09/vector%E7%AE%80%E4%BB%8B/"/>
    <id>ctguljj.github.io/2019/03/09/vector简介/</id>
    <published>2019-03-09T06:00:32.000Z</published>
    <updated>2019-03-11T05:17:09.699Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.cppreference.com/w/cpp/container/vector" target="_blank" rel="noopener">cpp</a></p><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><ul><li>vector的底层数据结构是动态数组<h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2></li><li>标准库的实现者使用了这样的内存分配策略：以最小的代价连续存储元素。为了使vector容器实现快速的内存分配，其实际分配的容量要比当前所需的空间多一些(预留空间)，vector容器预留了这些额外的存储区用于存放添加的新元素，于是不必为每个新元素进行一次内存分配。当继续向容器中加入元素导致备用空间被用光（超过了容量 capacity），此时再加入元素时vector的内存管理机制便会扩充容量至两倍，如果两倍容量仍不足，就扩张至足够大的容量。容量扩张必须经历“重新配置、元素移动、释放原空间”这个浩大的工程。</li><li>按照《STL源码剖析》中提供的vector源码，vector的内存配置原则为：<ul><li>如果vector原大小为0，则配置1，也即一个元素的大小。</li><li>如果原大小不为0，则配置原大小的两倍。</li></ul></li><li>当然，vector的每种实现都可以自由地选择自己的内存分配策略，分配多少内存取决于其实现方式，不同的库采用不同的分配策略。</li></ul><h2 id="迭代器失效问题"><a href="#迭代器失效问题" class="headerlink" title="迭代器失效问题"></a>迭代器失效问题</h2><ul><li>vector管理的是连续的内存空间，在容器中插入（或删除）元素时，插入（或删除）点后面的所有元素都需要向后（或向前）移动一个位置，指向发生移动的元素的迭代器都失效。</li><li>随着元素的插入，原来分配的连续内存空间已经不够且无法在原地拓展新的内存空间，整个容器会被copy到另外一块内存上，此时指向原来容器元素的所有迭代器通通失效。</li><li>删除元素后，指向被删除元素的迭代器失效，这是显而易见的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zh.cppreference.com/w/cpp/container/vector&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cpp&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;vector&quot;&gt;&lt;a href=&quot;#vector&quot;
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="vector" scheme="ctguljj.github.io/categories/stl/vector/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>list列表</title>
    <link href="ctguljj.github.io/2019/03/08/list%E5%88%97%E8%A1%A8/"/>
    <id>ctguljj.github.io/2019/03/08/list列表/</id>
    <published>2019-03-08T12:48:34.000Z</published>
    <updated>2019-03-11T10:25:42.519Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://zh.cppreference.com/w/cpp/container/list" target="_blank" rel="noopener">cppreference</a></li></ul><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><ul><li>#include ＜list＞</li></ul><h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><ul><li>list同样是一个模板类，它底层数据结构为双向循环链表。因此，它支持任意位置常数时间的插入/删除操作，不支持快速随机访问。</li><li>双向链表的每个元素中都有一个指针指向后一个元素，也有一个指针指向前一个元素</li></ul><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><ul><li>list的空间配置策略，自然是像我们普通双向链表那样，有多少元素申请多少内存。它不像vactor那样需要预留空间供新元素的分配，也不会因找不到连续的空间而引起整个容器的内存迁移。</li></ul><h2 id="迭代器失效问题"><a href="#迭代器失效问题" class="headerlink" title="迭代器失效问题"></a>迭代器失效问题</h2><ul><li>list 有一个重要性质：插入操作（insert）与接合操作（splice）都不会造成原有的list迭代器失效。这在vector是不成立的，因为vactor的插入可能引起空间的重新配置，导致原来的迭代器全部失效。list的迭代器失效，只会出现在删除的时候，指向删除元素的那个迭代器在删除后失效。<br>通常来说，<code>forward_list</code>在使用灵活度上比不上list，因为它只能单向迭代元素，且提供的接口没有list多。然而，在内存的使用上，它是比list占优势的。当对内存的要求占首要位置时，应该选择<code>forward_list</code>。</li></ul><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><ul><li><p><code>list&lt;int&gt; c;</code>空链表</p></li><li><p><code>list&lt;int&gt; c1(3);</code> 建一个含三个默认值是0的元素的链表　</p></li></ul><ul><li><code>list&lt;int&gt; c2(5,2);</code> 建一个含五个元素的链表，值都是2　</li><li><code>list&lt;int&gt; c4(c2);</code> 建一个c2的copy链表</li></ul><ul><li><p><code>list&lt;int&gt; c5(c1.begin(),c1.end());</code> c5含c1一个区域的元素[_First, _Last)。</p></li><li><p>list 容器不支持根据下标随机存取元素</p></li><li>list 的成员函数 front() 和 back()，可以各自返回第一个和最后一个元素的引用。在空 list 中调用它们中的任意一个，结果是未知的，因此不要这样使用。可以通过迭代器的自增或自减来访问 list 的内部元素。</li></ul><h1 id="List常用操作函数"><a href="#List常用操作函数" class="headerlink" title="List常用操作函数"></a>List常用操作函数</h1><h1 id="list-的特点"><a href="#list-的特点" class="headerlink" title="list 的特点"></a>list 的特点</h1><ul><li>(1) 不使用连续的内存空间这样可以随意地进行动态操作；</li><li>(2) 可以在内部任何位置快速地插入或删除，当然也可以在两端进push 和pop 。</li><li>(3) 不能进行内部的随机访问，即不支持[ ] 操作符和<code>vector.at() ；</code></li><li>(4) 相对于verctor 占用更多的内存。</li><li>有自身的sort函数</li><li>STL 中的算法 sort 可以用来对 vector 和 deque ，string排序，它需要随机访问迭代器的支持。因为 list 不支持随机访问迭代器，所以不能用算法 sort 对 list 容器排序。因此，list 容器引入了 sort 成员函数以完成排序。</li><li>注意<br>std::sort 要求随机访问迭代器且不能用于 list 。此函数与 std::sort 的区别在于，它不要求 list 的元素类型可交换，保留所有迭代器的值，并进行稳定排序。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.cppreference.com/w/cpp/container/list&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cppreference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;list&quot;
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="list" scheme="ctguljj.github.io/categories/stl/list/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>reverse反转函数</title>
    <link href="ctguljj.github.io/2019/03/08/reverse%E5%8F%8D%E8%BD%AC%E5%87%BD%E6%95%B0/"/>
    <id>ctguljj.github.io/2019/03/08/reverse反转函数/</id>
    <published>2019-03-08T11:56:15.000Z</published>
    <updated>2019-03-08T12:00:25.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reverse函数"><a href="#reverse函数" class="headerlink" title="reverse函数"></a>reverse函数</h1><ul><li>reverse函数可以反转一个容器中的内容，包含在<code>&lt;algorithm&gt;</code>库中。</li><li><p>参数：first、last</p><ul><li>first和last是双向迭代器类型，reverse函数反转的范围是[first,last)，所以包括first指向的元素，不包括last指向的元素。</li></ul></li><li><p><code>reverse(v.begin(),v.end());</code><strong>反向排列</strong>从头到尾部的元素</p></li><li>reverse函数没有返回值。</li><li>复杂度<ul><li>循环交换首尾元素。因此复杂度是线性的，并且循环半个数组长度。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;reverse函数&quot;&gt;&lt;a href=&quot;#reverse函数&quot; class=&quot;headerlink&quot; title=&quot;reverse函数&quot;&gt;&lt;/a&gt;reverse函数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;reverse函数可以反转一个容器中的内容，包含在&lt;code&gt;&amp;lt;a
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="常用函数" scheme="ctguljj.github.io/categories/c/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="常用函数" scheme="ctguljj.github.io/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于vector大小（size）和容量（capacity）</title>
    <link href="ctguljj.github.io/2019/03/08/%E5%85%B3%E4%BA%8Evector%E5%A4%A7%E5%B0%8F%EF%BC%88size%EF%BC%89%E5%92%8C%E5%AE%B9%E9%87%8F%EF%BC%88capacity%EF%BC%89/"/>
    <id>ctguljj.github.io/2019/03/08/关于vector大小（size）和容量（capacity）/</id>
    <published>2019-03-08T11:33:26.000Z</published>
    <updated>2019-03-12T09:04:41.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><ul><li>在Vector容器中有以下几个关于大小的函数</li></ul><pre><code>- size()返回容器的大小，目前存在的元素数- empty()判断容器是否为空- max_size()返回容器最大的可以存储的元素- capacity()返回容器当前能够容纳的元素数量</code></pre><ul><li><div class="note success"><p>capacity 一般大于size的原因是为了避免 每次增加数据时都要重新分配内存，所以一般会 生成一个较大的空间，以便随后的数据插入。</p></div></li><li>Vector的容量之所以重要，有以下两个原因：<pre><code>-  1. 容器的大小一旦超过capacity的大小，vector会重新配置内部的存储器，导致和vector元素相关的所有reference、pointers、iterator都会失效。- 2.内存的重新配置会很耗时间。</code></pre></li><li>size 是当前 vector 容器真实占用的大小，也就是容器当前拥有多少个容器。<br>capacity 是指在发生 realloc 前能允许的最大元素数，即预分配的内存空间。</li><li>在 STL 中，拥有 capacity 属性的容器只有 vector 和 string。      </li></ul><h2 id="避免内存重新配置的方法"><a href="#避免内存重新配置的方法" class="headerlink" title="避免内存重新配置的方法"></a>避免内存重新配置的方法</h2><ul><li>方法一：Reserve()保留适当容量<pre><code>在创建容器后，第一时间为容器分配足够大的空间，避免重新分配内存。</code></pre><ul><li><code>vec.reverse(n);</code></li></ul></li></ul><ul><li><p>方法二：利用构造函数创建出足够空间</p><pre><code>该方法是创建容器时，利用构造函数初始化的出足够的空间，      </code></pre><ul><li><code>vector&lt;int&gt; v(n);</code></li></ul></li><li><p>但是要注意，如果容器中reserve的容量太大，而实际中根本不需要那么多，或者元素插入完成后，以后就不会再进行插入操作了，那么多出来的这部分空间就是过剩空间，而对于过剩空间，我们可以通过“交换技术”成功缩小空间，交换技巧的变体可以用于清除容器和减少它的容量到你的实现提供的最小值。</p></li></ul><h2 id="Vector内存扩展方式"><a href="#Vector内存扩展方式" class="headerlink" title="Vector内存扩展方式"></a>Vector内存扩展方式</h2><p> <span id="inline-blue">更多可去 stl介绍 </span></p><ul><li>vector内存成长方式可归结以下三步曲:<br><span id="inline-toc">（1）</span>另觅更大空间；<br><span id="inline-toc">（2）</span>将原数据复制过去；<br><span id="inline-toc">（3）</span>释放原空间三部曲。</li></ul><ul><li><div class="note warning"><p>对于vector和string来说，当它们的需要更多空间时，就会自动增加空间，而每次增加空间的容量会导致很大的开销，首先必须分配新的内存块，它有容器目前容量的几倍（在大部分实现中，vector和string的容量每次变为2倍），然后把所有元素从容器的旧内存拷贝到它的新内存，接着销毁旧内存中的对象，最后回收旧内存。</p></div></li><li><p>每次重新分配空间，所有指向vector或string中的迭代器、指针和引用都会失效，这意味着简单地把一个元素插入vector或string的动作也可能需要更新其他使用了指向vector或string中的迭代器、指针或引用的数据结构而膨胀。</p></li><li><p><img src="https://raw.githubusercontent.com/ctguljj/ctguljj.github.io/master/images/vector.jpg" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vector&quot;&gt;&lt;a href=&quot;#vector&quot; class=&quot;headerlink&quot; title=&quot;vector&quot;&gt;&lt;/a&gt;vector&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在Vector容器中有以下几个关于大小的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;- s
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="vector" scheme="ctguljj.github.io/categories/stl/vector/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>头文件</title>
    <link href="ctguljj.github.io/2019/03/08/%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <id>ctguljj.github.io/2019/03/08/头文件/</id>
    <published>2019-03-08T10:57:31.000Z</published>
    <updated>2019-03-08T11:54:40.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="include"><a href="#include" class="headerlink" title="#include"></a>#include<functional></functional></h1><ul><li>STL定义运算函数（代替运算符）</li></ul><h1 id="include-lt-bits-stdc-h-gt"><a href="#include-lt-bits-stdc-h-gt" class="headerlink" title="#include&lt;bits/stdc++.h&gt;"></a>#include&lt;bits/stdc++.h&gt;</h1><ul><li>编译器GCC 4.8支持的万能头文件，基本包含所有头文件</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;include&quot;&gt;&lt;a href=&quot;#include&quot; class=&quot;headerlink&quot; title=&quot;#include&quot;&gt;&lt;/a&gt;#include&lt;functional&gt;&lt;/functional&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;STL定义运算函数（代替运算符）&lt;
      
    
    </summary>
    
      <category term="头文件" scheme="ctguljj.github.io/categories/%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    
      <category term="functioinal" scheme="ctguljj.github.io/categories/%E5%A4%B4%E6%96%87%E4%BB%B6/functioinal/"/>
    
    
      <category term="头文件" scheme="ctguljj.github.io/tags/%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>pair容器</title>
    <link href="ctguljj.github.io/2019/03/08/pair%E5%AE%B9%E5%99%A8/"/>
    <id>ctguljj.github.io/2019/03/08/pair容器/</id>
    <published>2019-03-08T09:33:49.000Z</published>
    <updated>2019-03-08T11:28:47.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><ul><li>pair类型的使用相当的繁琐，如果定义多个相同的pair类型对象，可以使用typedef简化声明：<br><code>typedef pair&lt;string,string&gt; Author;</code></li></ul><ul><li>除了构造函数，标准库还定义了一个<code>make_pair</code>函数，由传递给它的两个实参生成一个新的pair对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; next_auth;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">string</span> first,last;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;first&gt;&gt;last) &#123;</span><br><span class="line"></span><br><span class="line">   next_auth=make_pair(first,last);</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>等价的更复杂的操作:<code>next_auth=pair&lt;string,string&gt;(first,last);</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pair&quot;&gt;&lt;a href=&quot;#pair&quot; class=&quot;headerlink&quot; title=&quot;pair&quot;&gt;&lt;/a&gt;pair&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;pair类型的使用相当的繁琐，如果定义多个相同的pair类型对象，可以使用typedef简化声明：&lt;br&gt;&lt;co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sort函数</title>
    <link href="ctguljj.github.io/2019/03/08/sort%E5%87%BD%E6%95%B0/"/>
    <id>ctguljj.github.io/2019/03/08/sort函数/</id>
    <published>2019-03-08T09:06:25.000Z</published>
    <updated>2019-03-11T10:17:47.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>排序算法需要通过随机访问迭代器来访问容器中的元素，因此有的容器就不支持排序算法。</li><li>STL容器的排序，支持随机访问的容器vector,deque,string没有sort成员，可调用std::sort排序；list排序调用自带的list::sort。<ul><li>注意<br>std::sort 要求随机访问迭代器且不能用于 list 。此函数与 std::sort 的区别在于，它不要求 list 的元素类型可交换，保留所有迭代器的值，并进行稳定排序。 </li></ul></li><li>sort函数有以下特征：<ol><li>要求输入一个范围[first, last)</li><li>随机迭代器，能用此算法的容器是支持随机访问的容器：vector, deque, string。</li></ol></li><li>对于list容器，list自带一个sort成员函数list::sort()。它和算法函数中的sort差不多，但是list::sort是基于指针的方式排序，也就是说，所有的数据移动和比较都是此用指针的方式实现，因此排序后的迭代器一直保持有效（vector中sort后的迭代器会失效)。</li></ul><h1 id="sort函数"><a href="#sort函数" class="headerlink" title="sort函数"></a>sort函数</h1><ul><li>默认的为升序</li><li>第三参数——比较函数。比较函数是一个自己定义的函数，返回值是bool型(一般)，它规定了什么样的关系</li><li>排序的数据类型不局限于整数，只要是定义了小于运算的类型都可以，比如字符串类string。</li><li>如果是没有定义小于运算的数据类型，或者想改变排序的顺序，就要用到第三参数——比较函数。</li><li><p><code>vector&lt;int&gt; v;</code></p><p>  <code>sort(v.begin(), v.end(), greater&lt;int&gt;());</code></p></li></ul><ul><li><code>sort(a, a+n, cmp);</code></li></ul><ul><li>对数组进行排序,其头文件为algorithm.h，形式为<code>sort（数组名，数组名+数组长度）</code>，默认为升序，复杂度为nlog（n）；</li><li>加<code>#include&lt;functional&gt;</code>因为用了<code>greater&lt;int&gt;()</code></li><li><code>sort(begin, end, less&lt;数据类型&gt;（）)，升序；</code></li><li><code>sort(begin, end, greater&lt;数据类型&gt;（）)，降序；</code></li><li><code>sort（数组名，数组名+数组长度，less&lt;数组数据类型&gt;()）,升序；</code></li><li><code>sort(数组名，数组名+数组长度，greater&lt;数组数据类型&gt;（）)，降序。</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;排序算法需要通过随机访问迭代器来访问容器中的元素，因此有的容器就不支持排序算法。&lt;/li&gt;
&lt;li&gt;STL容器的排序，支持随机访
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="常用函数" scheme="ctguljj.github.io/categories/c/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="常用函数" scheme="ctguljj.github.io/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="ctguljj.github.io/2019/03/08/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>ctguljj.github.io/2019/03/08/字符串/</id>
    <published>2019-03-08T08:57:42.000Z</published>
    <updated>2019-03-08T08:58:53.584Z</updated>
    
    <content type="html"><![CDATA[<ul><li>计算机领域中，这个字典序就不仅仅用来比较英文单词了，而是比较任意字符串。对于两个字符串，大小关系取决于两个字符串从左到右第一个不同字符的 ASCII 值的大小关系。如strcmp函数的原理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;计算机领域中，这个字典序就不仅仅用来比较英文单词了，而是比较任意字符串。对于两个字符串，大小关系取决于两个字符串从左到右第一个不同字符的 ASCII 值的大小关系。如strcmp函数的原理&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="字符串" scheme="ctguljj.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>stl代码练习</title>
    <link href="ctguljj.github.io/2019/03/08/stl%E4%BB%A3%E7%A0%81%E7%BB%83%E4%B9%A0/"/>
    <id>ctguljj.github.io/2019/03/08/stl代码练习/</id>
    <published>2019-03-08T08:30:45.000Z</published>
    <updated>2019-03-08T10:14:05.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="learn-stl"><a href="#learn-stl" class="headerlink" title="learn_stl"></a>learn_stl</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> name; </span><br><span class="line"><span class="comment">//string暂时可以当成一种结构体变量,专门用来定义字符串,name的长度可以由name.length()获得 </span></span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line">&#125;Student;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; link_list;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dq;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; Stack;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; stu;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_1</span><span class="params">(<span class="keyword">int</span> a[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_2</span><span class="params">(<span class="keyword">int</span> a[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_3</span><span class="params">(<span class="keyword">int</span> a[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_4</span><span class="params">(<span class="keyword">int</span> a[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_5</span><span class="params">(<span class="keyword">int</span> a[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_6</span><span class="params">(<span class="keyword">int</span> a[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_7</span><span class="params">(Student a[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[MAX_SIZE];</span><br><span class="line">Student student[MAX_SIZE];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="built_in">cin</span> &gt;&gt; student[i].name &gt;&gt; student[i].grade;<span class="comment">//只用于map </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.用vector存入数组中所有的数据并升序排序,然后删去最大元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">vec.push_back(a[i]);</span><br><span class="line">sort(vec.begin(), vec.end());</span><br><span class="line">vec.pop_back();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vec[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2. 用list存入数组中所有的元素并升序排序。删除其中最小的节点并再插入一个最大的节点 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">link_list.push_back(a[i]);</span><br><span class="line">link_list.sort();</span><br><span class="line"></span><br><span class="line">link_list.erase(link_list.begin());</span><br><span class="line">link_list.insert(link_list.begin(), *(--link_list.end())); </span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator itt = link_list.begin(); itt != link_list.end(); itt++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *itt &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.用deque存入数组中所有的数据，在头尾端插入一个和队头队尾相同的元素。</span></span><br><span class="line"><span class="comment">   将deque中的数据用另一个vector存储起来排序后再放回deque中 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">dq.push_back(a[i]);</span><br><span class="line">dq.push_back(a[n<span class="number">-1</span>]), dq.push_front(a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; haha;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">haha.push_back(a[i]);</span><br><span class="line">sort(haha.begin(), haha.end());</span><br><span class="line">dq.clear();</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dq(haha.begin(), haha.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;:: iterator ittt = dq.begin(); ittt != dq.end(); ittt++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *ittt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4.将数组中的元素依次存入stack中，然后依次存入queue中实现数组元素的reverse </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">Stack.push(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i  &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">que.push(Stack.top());</span><br><span class="line">Stack.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; que.front() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5.不借助其他的函数和变量，利用priority_queue实现数组的升序排序 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, less&lt;<span class="keyword">int</span>&gt; &gt; q; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">q.push(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6.将数组中的元素全部存入set中，并输入一个元素，在set中查找它，找到则删除它 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">s.insert(a[i]);</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;j);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator itt;</span><br><span class="line">itt = s.find(j);</span><br><span class="line"><span class="keyword">if</span>(itt != s.end())</span><br><span class="line">s.erase(itt);</span><br><span class="line"><span class="keyword">for</span>(itt = s.begin(); itt != s.end(); itt++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *itt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7.将学生的姓名和成绩全部存入map中，并根据学生成绩降序排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(不能修改给定map的两个参数的顺序) </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(pair &lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; a, pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; b)</span></span>;</span><br><span class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; pa;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"> pa = make_pair(student[i].name, student[i].grade);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    stu.insert(pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;(student[i].name, student[i].grade));</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; &gt; baba(stu.begin(), stu.end() );</span><br><span class="line">sort(baba.begin(), baba.end(), cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; baba.size(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; baba[i].first &lt;&lt; <span class="string">" "</span> &lt;&lt; baba[i].second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种(就是直接用make_pair插入以及sort函数直接用greater逆序排列) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">stu.insert(make_pair(student[i].name, student[i].grade)); </span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; &gt; yeye(stu.begin(), stu.end() );</span><br><span class="line">sort(yeye.begin(), yeye.end(), greater&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; &gt;());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; yeye[i].first &lt;&lt; <span class="string">" "</span> &lt;&lt; yeye[i].second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分割线 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair &lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; a, pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;learn-stl&quot;&gt;&lt;a href=&quot;#learn-stl&quot; class=&quot;headerlink&quot; title=&quot;learn_stl&quot;&gt;&lt;/a&gt;learn_stl&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="代码练习" scheme="ctguljj.github.io/categories/stl/%E4%BB%A3%E7%A0%81%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>stl介绍</title>
    <link href="ctguljj.github.io/2019/03/08/stl/"/>
    <id>ctguljj.github.io/2019/03/08/stl/</id>
    <published>2019-03-08T05:38:37.000Z</published>
    <updated>2019-03-11T10:38:47.267Z</updated>
    
    <content type="html"><![CDATA[<ul><li>注意，STL头文件没有扩展名.h</li><li>STL中默认是采用小于号来排序的</li><li><p><a href="http://www.cnblogs.com/QG-whz/p/5152963.html#_label2" target="_blank" rel="noopener">stl很好的介绍（原链接）</a></p></li><li><p><a href="https://zh.cppreference.com/w/cpp/container" target="_blank" rel="noopener">c++手册</a></p></li></ul><h1 id="1-容器概论"><a href="#1-容器概论" class="headerlink" title="1.容器概论"></a>1.容器概论</h1><ul><li>容器，置物之所也。像桶可装水，碗可盛汤，C++的容器，可以存储对象。容器有多种，用来处理不同的元素操作诉求。按照元素存储到容器中以及访问方式的差异，容器分为顺序容器与关联容器。</li><li>顺序容器也称为序列式容器。序列式容器按元素插入的顺序存储元素，这些元素可以进行排序，但未必是有序的。C++本身内置了一个序列式容器array（数组），STL另外提供了vector,list,forward_list,deque,stack,queue,priority-queue，string等等序列式容器。</li><li>所有的容器都是基于模板实现的，因为容器必须保证能装得下各种各样的类型。其中，stack，queue都是基于deque来实现的，priority-queue基于heap来实现，从技术上来说它们属于容器适配器（adapter）。其中array与forward_list是C++11添加的新容器类型。</li></ul><h1 id="2-序列式容器（顺序容器）"><a href="#2-序列式容器（顺序容器）" class="headerlink" title="2.序列式容器（顺序容器）"></a>2.序列式容器（顺序容器）</h1><ul><li><p>向量(vector) 连续存储的元素<code>&lt;vector&gt;</code></p></li><li><p>列表(list) 由节点组成的双向链表，每个结点包含着一个元素<code>&lt;list&gt;</code></p></li><li><p>双端队列(deque) 连续存储的指向不同元素的指针所组成的数组<code>&lt;deque&gt;</code></p></li></ul><h1 id="3-适配器容器"><a href="#3-适配器容器" class="headerlink" title="3.适配器容器"></a>3.适配器容器</h1><ul><li><p>栈(stack) 后进先出的值的排列 <code>&lt;stack&gt;</code></p></li><li><p>队列(queue) 先进先出的值的排列<code>&lt;queue&gt;</code></p></li><li><p>优先队列(priority_queue) 元素的次序是由作用于所存储的值对上的某种谓词决定的的一种队列 <code>&lt;queue&gt;</code></p></li></ul><h1 id="4-关联式容器"><a href="#4-关联式容器" class="headerlink" title="4.关联式容器"></a>4.关联式容器</h1><ul><li>关联容器内的元素是排序的。插入元素时，容器会按一定的排序规则将元素放到适当的位置上，因此插入元素时不能指定位置。</li><li><p>集合(set) 由节点组成的红黑树，每个节点都包含着一个元素，节点之间以某种作用于元素对的谓词排列，没有两个不同的元素能够拥有相同的次序<code>&lt;set&gt;</code></p></li><li><p>多重集合(multiset) 允许存在两个次序相等的元素的集合<code>&lt;set&gt;</code></p></li><li><p>映射(map) 由{键，值}对组成的集合，以某种作用于键对上的谓词排列 <code>&lt;map&gt;</code></p></li><li><p>多重映射(multimap) 允许键对有相等的次序的映射<code>&lt;map&gt;</code></p></li></ul><h1 id="5-容器适配器"><a href="#5-容器适配器" class="headerlink" title="5.容器适配器"></a>5.容器适配器</h1><ul><li>stack，也称为栈，是一种先进后出的数据结构。STL中的statck是一种容器适配器。所谓的容器适配器，是以某种容器作为底部容器，在底部容器之上修改接口，形成另一种风貌。stack默认以双端队列deque作为底部容器。stack没有提供迭代器，通过push/pop接口对栈顶元素进行操作。</li><li>queue，也称为队列，是一种先进先出的数据结构，它同样也是一种容器适配器。它的底部容器默认为deque。同样，queue也没有提供迭代器，通过push向队尾压入元素，pop从队首弹出元素。</li><li>priority-queue，优先队列，是一种拥有权值观念的队列，例如在以整数大小作为衡量的权值定义下，priority-queue总是弹出最大的数。priority-queue的底部数据结构默认是max-heap，大顶堆。</li></ul><h1 id="6-基础总结"><a href="#6-基础总结" class="headerlink" title="6.基础总结"></a>6.基础总结</h1><p><img src="https://raw.githubusercontent.com/ctguljj/ctguljj.github.io/master/images/stl总结.png" alt=""></p><ul><li><p>注意：</p><ul><li>“尾部可高效插入/删除元素”，意味着在除了尾部之外的其他位置插入/删除元素是较低效的。</li><li>“顺序访问”意味着要访问某一个元素，必须遍历其他元素。</li><li>迭代器失效意味着指针、引用在同样的情况下也会失效。</li></ul></li><li><p>所有容器都有以下两个成员函数： </p><ul><li>int size()：返回容器对象中元素的个数。</li><li>bool empty()：判断容器对象是否为空。</li></ul></li><li><p>顺序容器和关联容器还有以下成员函数： </p><ul><li>begin()：返回指向容器中第一个元素的迭代器。</li><li>end()：返回指向容器中最后一个元素后面的位置的迭代器。</li><li>rbegin()：返回指向容器中最后一个元素的反向迭代器。</li><li>rend()：返回指向容器中第一个元素前面的位置的反向迭代器。</li><li>erase(…)：从容器中删除一个或几个元素。该函数参数较复杂，此处省略。</li><li>clear()：从容器中删除所有元素。</li></ul></li><li><p>如果一个容器是空的，则 begin() 和 end() 的返回值相等，rbegin() 和 rend() 的返回值也相等。</p></li><li><p>顺序容器还有以下常用成员函数： </p><ul><li>front()：返回容器中第一个元素的引用。</li><li>back()：返回容器中最后一个元素的引用。</li><li>push_back()：在容器末尾增加新元素。</li><li>pop_back()：删除容器末尾的元素。</li><li>insert(…)：插入一个或多个元素。该函数参数较复杂，此处省略。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;注意，STL头文件没有扩展名.h&lt;/li&gt;
&lt;li&gt;STL中默认是采用小于号来排序的&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/QG-whz/p/5152963.html#_label2&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>c++map容器</title>
    <link href="ctguljj.github.io/2019/03/08/c-map%E5%AE%B9%E5%99%A8/"/>
    <id>ctguljj.github.io/2019/03/08/c-map容器/</id>
    <published>2019-03-08T05:37:02.000Z</published>
    <updated>2019-03-12T10:38:44.771Z</updated>
    
    <content type="html"><![CDATA[<ul><li>STL是一个统一的整体，map的很多用法都和STL中其它的东西结合在一起</li><li>map中由于它内部有序，由红黑树保证，因此很多函数执行的时间复杂度都是log2N的，如果用map函数可以实现的功能，而STL  Algorithm也可以完成该功能，建议用map自带函数，效率高一些。</li><li><p>sort算法有个限制，利用sort算法只能对序列容器进行排序，就是线性的（如vector，list，deque）。map是一个集合容器，它里面存储的元素是pair，但是它不是线性存储的（像红黑树），所以利用sort不能直接和map结合进行排序。</p></li><li><p>operator()重载必须是常成员函数，因为常对象只能调用常成员函数</p></li><li>STL中默认是采用小于号来排序的</li><li>键和值的数据类型是不相同的，这与set不同。set中的key和value是Key类型的，而map中的key和value是一个pair结构中的两个分量</li><li><a href="https://baike.baidu.com/item/STL%20map#1" target="_blank" rel="noopener">stl-map</a></li></ul><h1 id="对map的排序"><a href="#对map的排序" class="headerlink" title="对map的排序"></a>对map的排序</h1><h2 id="key值排序"><a href="#key值排序" class="headerlink" title="key值排序"></a>key值排序</h2><ul><li>按照Key值自动进行了排序</li><li>上面的按key值排序有个缺点：即当插入的有多个相等的值时，由于key的唯一性，会只保留一个。</li></ul><h3 id="map的定义"><a href="#map的定义" class="headerlink" title="map的定义"></a>map的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="title">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Compare</span> = <span class="title">less</span>&lt;Key&gt;,</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">          <span class="title">class</span> <span class="title">Allocator</span> = <span class="title">allocator</span>&lt;pair&lt;const Key,T&gt; &gt; &gt; <span class="title">class</span> <span class="title">map</span>;</span></span><br></pre></td></tr></table></figure><ul><li>它有四个参数，其中我们比较熟悉的有两个: Key 和 Value。第四个是 Allocator，用来定义存储分配模型的</li><li>现在重点看下第三个参数： <code>class Compare = less&lt;Key&gt;</code><br>这也是一个class类型的，而且提供了默认值 <code>less&lt;Key&gt;</code>。 less是stl里面的一个函数对象，那么什么是函数对象呢？<br>所谓的函数对象：即调用操作符的类，其对象常称为函数对象（function object），它们是行为类似函数的对象。表现出一个函数的特征，就是通过“对象名+(参数列表)”的方式使用一个 类，其实质是对operator()操作符的重载。<ul><li>less的实现：</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">less</span> :</span> binary_function &lt;T,T,<span class="keyword">bool</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> T&amp; y)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">return</span> x&lt;y;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>是一个带模板的struct，里面仅仅对()运算符进行了重载，实现很简单，但用起来很方便，这就是函数对象的优点所在。stl中还为四则运算等常见运算定义了这样的函数对象，与less相对的还有greater</p></li><li><p>map这里指定less作为其默认比较函数(对象)，所以我们通常如果不自己指定Compare，map中键值对就会按照Key的less顺序进行组织存储</p></li><li><p>可以在定义map的时候，指定它的第三个参数Compare，比如我们把默认的less指定为greater：要加<strong><code>#include &lt;functional&gt;</code></strong></p><ul><li><code>map&lt;string, int, greater&lt;string&gt; &gt; name_score_map;</code></li></ul></li></ul><ul><li>只要我们自己写一个函数对象，实现想要的逻辑，定义map的时候把Compare指定为我们自己编写的这个就ok啦。<ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">struct CmpByKeyLength &#123;</span><br><span class="line"></span><br><span class="line">bool operator()(const string&amp; k1, const string&amp; k2) const &#123;</span><br><span class="line"></span><br><span class="line">return k1.length() &lt; k2.length();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>-`map&lt;string, int, CmpByKeyLength&gt; name_score_map;`</code></pre><h2 id="按照value排序"><a href="#按照value排序" class="headerlink" title="按照value排序"></a>按照value排序</h2><ul><li><p>思路1：可以考虑将value作为key值进行自动排序。</p></li><li><p>思路2：可以把map中的key值和value值分别转存到一个pair类型的vector中，在对vector按照一定的规则排序即可。这样的方法对值一样的情况也能够使用。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; PAIR;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; name_score_map;</span><br><span class="line">name_score_map.insert(make_pair(<span class="string">"Bing"</span>, <span class="number">99</span>));</span><br><span class="line"></span><br><span class="line">name_score_map.insert(make_pair(<span class="string">"Albert"</span>, <span class="number">86</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;PAIR&gt; name_score_vec(name_score_map.begin(), name_score_map.end());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sort(name_score_vec.begin(), name_score_vec.end(), cmp);</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>对key 排序的话，直接使用<code>greater&lt;string&gt;</code>在map定义的时候就。而要对value排序，则是使用函数对象，先将map转换为vector，调用sort函数中传入一个函数对象，则可以实现对value 的排序。还有一点是pair 只重载了<code>&amp;lt;</code>，则stl 则不能使用 == 运算符。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;STL是一个统一的整体，map的很多用法都和STL中其它的东西结合在一起&lt;/li&gt;
&lt;li&gt;map中由于它内部有序，由红黑树保证，因此很多函数执行的时间复杂度都是log2N的，如果用map函数可以实现的功能，而STL  Algorithm也可以完成该功能，建议用
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="map" scheme="ctguljj.github.io/categories/stl/map/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>bool类型</title>
    <link href="ctguljj.github.io/2019/03/08/bool%E7%B1%BB%E5%9E%8B/"/>
    <id>ctguljj.github.io/2019/03/08/bool类型/</id>
    <published>2019-03-08T05:03:30.000Z</published>
    <updated>2019-03-08T05:31:34.204Z</updated>
    
    <content type="html"><![CDATA[<ul><li>千万不要让编译器决定你的默认值，永远初始化 </li><li>变量未初始化的默认值要看变量的存储类型，也可能与编译器有关，跟其它因素</li></ul><h1 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h1><ul><li>c++中有bool类型</li><li>bool可用于定义函数类型为布尔型，函数里可以有 return TRUE; return FALSE 之类的语句。</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>为了安全起见， 最好初始化为false.</li><li>bool值一定要初始化</li></ul><h1 id="在GCC编译器下各个类型的全局变量的默认值："><a href="#在GCC编译器下各个类型的全局变量的默认值：" class="headerlink" title="在GCC编译器下各个类型的全局变量的默认值："></a>在GCC编译器下各个类型的全局变量的默认值：</h1><ul><li>表示数字的变量类型默认值都为0<ul><li>bool型默认值为false</li><li>string型默认值为空字符串</li><li>char 型比较特殊。char类型默认值为’\0’， 即字符串结束标志，其整数值为0。如果用printf(“%d”)输出时值为 0， 但用printf(“%c”),或cout 输出时显示为”a”， char型数组默认值为空字符串，其中的每个元素与单个char类型相同，所以用puts() 和printf(“%s”)<br>输出都是空字符串。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;千万不要让编译器决定你的默认值，永远初始化 &lt;/li&gt;
&lt;li&gt;变量未初始化的默认值要看变量的存储类型，也可能与编译器有关，跟其它因素&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;bool类型&quot;&gt;&lt;a href=&quot;#bool类型&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="数据类型" scheme="ctguljj.github.io/categories/c/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="c++" scheme="ctguljj.github.io/tags/c/"/>
    
  </entry>
  
</feed>
