<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LjJiaJun&#39; Home</title>
  
  <subtitle>书青春 - 话人生 | Coding - Thinking - Acting</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="ctguljj.github.io/"/>
  <updated>2019-03-04T15:32:02.472Z</updated>
  <id>ctguljj.github.io/</id>
  
  <author>
    <name>LjJiaJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c与c++常用函数</title>
    <link href="ctguljj.github.io/2019/03/04/c%E4%B8%8Ec-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>ctguljj.github.io/2019/03/04/c与c-常用函数/</id>
    <published>2019-03-04T04:51:49.000Z</published>
    <updated>2019-03-04T15:32:02.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><ul><li>max, min, fill, memset, sort, swap</li></ul><h1 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h1><ul><li>字符串比较函数strcmp因为原理是两个字符串一个个比较，所以可以比较字符是否相同！！！！！<div class="note success"><p>如果把序号按字符串存储，则会可以通过strcmp比较序号是否相同。</p></div>(有用)</li><li>Strlen函数如果没有遇到’\0’，会一直计算下去，字符串二维数组不可以用strlen，因为二维数组每一行相当于一个字符串一维数组，每一行都有’\0’！</li></ul><h2 id="memset函数"><a href="#memset函数" class="headerlink" title="memset函数"></a>memset函数</h2><ul><li>Memset函数:可以本身就是为字符数组设计的源代码：unsigned int 有一个特性就是如果将其赋值或者当作字节来使用的话，编译器将会截取低八位作为一个字节使用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">void *(memset)(void *s, int c, size_t n)</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">const unsigned char uc = c;</span><br><span class="line">unsigned char *su;</span><br><span class="line">for (su = s; 0 &lt; n; ++su, --n)</span><br><span class="line">    *su = uc;</span><br><span class="line">return (s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码说明对于数组参数是按照字符数组的形式进行赋值的。<br>也就是c的值每次赋值给一个字节，而不是4个字节，c的类型是int类型，4个字节，<br>但只会赋值最低位的一个字节的内容。</p><ul><li><p>对于非单字节数据类型只能初始化为0，而不能初始化成别的初值，因为对所有字节按任意顺序赋值0的结果都是0，而如果初始化为其他的值，就会一个字节一个字节的进行赋值，从而出现奇怪的结果。</p></li><li><p>对于变量：当结构体类型中包含指针时，在使用memset初始化时需要小心。<br>struct sample_strcut stTest;用memset就非常方便：memset(&amp;stTest,0,sizeof(struct sample_struct));<br>原因是memset初始化的时候是按字节一个一个填充的，int有四个字节，于是填充成0000 0001 0000 0001 0000 00001 0000 0001，这样得出数组中的每个元素的值就是16843009了。<br>赋值时0与’\0’效果一样。</p></li><li>可以用于清空数组内元素与赋,memset函数一般用来填充char型数组,也经常用于填充int型的全0或全-1.不可用其它值，除非高低字节相同.</li></ul><p>-<br>    <code>`</code></p><pre><code>#define INF 0x3f3f3f3fint num[N];memset(num, INF, sizeof(num));</code></pre><p>这样得到的数组里面的每一个元素数值都是INF<br>看一下INF的二进制表示：<br>00111111001111110011111100111111<br>可以看出低8位是00111111，<strong><em>也就是实际赋值时是用<br>00111111来填充一个int类型</em></strong>，结果正好也是<br>00111111001111110011111100111111<br>于是就成功用memset进行了赋值。</p><h3 id="INF小知识"><a href="#INF小知识" class="headerlink" title="INF小知识"></a>INF小知识</h3><ul><li>0x3f3f3f3f的十进制是1061109567，也就是10^9级别的（和0x7fffffff一个数量级），而一般场合下的数据都是小于10^9的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。</li><li><p>另一方面，由于一般的数据都不会大于10^9，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上0x3f3f3f3f+0x3f3f3f3f=2122219134，这非常大但却没有超过32-bit int的表示范围，所以0x3f3f3f3f还满足了我们“无穷大加无穷大还是无穷大”的需求。</p></li><li><p>最后，0x3f3f3f3f还能给我们带来一个意想不到的额外好处：如果我们想要将某个数组清零，我们通常会使用memset(a,0,sizeof(a))这样的代码来实现（方便而高效），但是当我们想将某个数组全部赋值为无穷大时（例如解决图论问题时邻接矩阵的初始化），就不能使用memset函数而得自己写循环了（写这些不重要的代码真的很痛苦），我们知道这是因为memset是按字节操作的，它能够对数组清零是因为0的每个字节都是0，现在好了，如果我们将无穷大设为0x3f3f3f3f，那么奇迹就发生了，0x3f3f3f3f的每个字节都是0x3f！<strong><em>所以要把一段内存全部置为无穷大，我们只需要memset(a,0x3f,sizeof(a))</em></strong>。<br>所以在通常的场合下，const int INF = 0x3f3f3f3f;真的是一个非常棒的选择。</p></li><li><div class="note warning"><p>因为在某些编译器分配空间时,内存中默认值并不为0,所以先用memset函数赋初值0.</p></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用函数&quot;&gt;&lt;a href=&quot;#常用函数&quot; class=&quot;headerlink&quot; title=&quot;常用函数&quot;&gt;&lt;/a&gt;常用函数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;max, min, fill, memset, sort, swap&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;字符
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="常用函数" scheme="ctguljj.github.io/categories/c/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="c++" scheme="ctguljj.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>算法核心思想：倍增</title>
    <link href="ctguljj.github.io/2019/03/03/%E7%AE%97%E6%B3%95%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%EF%BC%9A%E5%80%8D%E5%A2%9E/"/>
    <id>ctguljj.github.io/2019/03/03/算法核心思想：倍增/</id>
    <published>2019-03-03T09:23:16.000Z</published>
    <updated>2019-03-03T09:23:16.382Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据类型问题</title>
    <link href="ctguljj.github.io/2019/03/03/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%AE%E9%A2%98/"/>
    <id>ctguljj.github.io/2019/03/03/数据类型问题/</id>
    <published>2019-03-03T09:11:09.000Z</published>
    <updated>2019-03-04T04:58:59.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><ul><li>二进制不能表示所有的小数，他只是选一个离需表示值的最近的一个数进行储存而已。</li><li>输出有e时,可能是输出变量类型float,double的问题，可改为int其它类型试试</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据&quot;&gt;&lt;a href=&quot;#数据&quot; class=&quot;headerlink&quot; title=&quot;数据&quot;&gt;&lt;/a&gt;数据&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;二进制不能表示所有的小数，他只是选一个离需表示值的最近的一个数进行储存而已。&lt;/li&gt;
&lt;li&gt;输出有e时,可能是输出变量类型f
      
    
    </summary>
    
      <category term="数据类型" scheme="ctguljj.github.io/categories/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="数据类型" scheme="ctguljj.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>blog写作4</title>
    <link href="ctguljj.github.io/2019/03/01/blog%E5%86%99%E4%BD%9C4/"/>
    <id>ctguljj.github.io/2019/03/01/blog写作4/</id>
    <published>2019-03-01T11:09:27.000Z</published>
    <updated>2019-03-02T04:34:44.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h1><ul><li>将markdown需要用的图片放到git仓库中，发布到github上</li><li><span id="inline-blue">  访问图片,点 download 按钮，页面打开后,在地址栏可以复制图片地址，或者在Download按钮上直接右键 “复制链接地址” </span></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图片插入&quot;&gt;&lt;a href=&quot;#图片插入&quot; class=&quot;headerlink&quot; title=&quot;图片插入&quot;&gt;&lt;/a&gt;图片插入&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;将markdown需要用的图片放到git仓库中，发布到github上&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;in
      
    
    </summary>
    
      <category term="blog" scheme="ctguljj.github.io/categories/blog/"/>
    
      <category term="markdown" scheme="ctguljj.github.io/categories/blog/markdown/"/>
    
    
      <category term="blog" scheme="ctguljj.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>blog写作3</title>
    <link href="ctguljj.github.io/2019/03/01/blog%E5%86%99%E4%BD%9C3/"/>
    <id>ctguljj.github.io/2019/03/01/blog写作3/</id>
    <published>2019-03-01T10:23:46.000Z</published>
    <updated>2019-03-02T04:28:06.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h1><ul><li>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：<br>\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号</li></ul><h1 id="文字增加背景色块"><a href="#文字增加背景色块" class="headerlink" title="文字增加背景色块"></a>文字增加背景色块</h1><ul><li>在你需要编辑的文章地方。放置如下代码：<br><span id="inline-blue"> 站点配置文件 </span><br><span id="inline-purple"> 主题配置文件 </span><br><span id="inline-yellow"> 站点配置文件 </span><br><span id="inline-green"> 主题配置文件 </span></li></ul><h1 id="主题自带样式"><a href="#主题自带样式" class="headerlink" title="主题自带样式"></a>主题自带样式</h1><h2 id="FontAwesome"><a href="#FontAwesome" class="headerlink" title="FontAwesome"></a>FontAwesome</h2><p><strong>(以下图标必须在网页上方点击全部显示才能显示即受保护的内容)</strong></p><ul><li><i class="fa fa-camera-retro fa-lg"></i> fa-lg<br> <i class="fa fa-camera-retro fa-2x"></i> fa-2x<br> <i class="fa fa-camera-retro fa-3x"></i> fa-3x<br><i class="fa fa-camera-retro fa-4x"></i> fa-4x<br><i class="fa fa-camera-retro fa-5x"></i> fa-5x</li><li><i class="fa fa-spinner fa-spin"></i><br><i class="fa fa-circle-o-notch faspin"><i><br><i class="fa fa-refresh fa-spin"></i><br><i class="fa fa-cog fa-spin"></i><br> <i class="fa fa-spinner fa-pulse"></i></i></i></li></ul><h2 id="note标签"><a href="#note标签" class="headerlink" title="note标签"></a>note标签</h2><ul><li>在主题配置文件_config.yml里有一个关于这个的配置,需要提前设置.</li><li><div class="note default"><p>default</p></div></li><li><div class="note primary"><p>primary</p></div></li><li><div class="note success"><p>success</p></div></li><li><div class="note info"><p>info</p></div></li><li><div class="note warning"><p>warning</p></div></li><li><div class="note danger"><p>danger</p></div></li><li><div class="note danger no-icon"><p>danger no-icon</p></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反斜杠&quot;&gt;&lt;a href=&quot;#反斜杠&quot; class=&quot;headerlink&quot; title=&quot;反斜杠&quot;&gt;&lt;/a&gt;反斜杠&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效
      
    
    </summary>
    
      <category term="blog" scheme="ctguljj.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="ctguljj.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>崴脚恢复</title>
    <link href="ctguljj.github.io/2019/03/01/%E5%B4%B4%E8%84%9A%E6%81%A2%E5%A4%8D/"/>
    <id>ctguljj.github.io/2019/03/01/崴脚恢复/</id>
    <published>2019-03-01T08:36:28.000Z</published>
    <updated>2019-03-02T04:33:47.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="崴脚恢复"><a href="#崴脚恢复" class="headerlink" title="崴脚恢复"></a>崴脚恢复</h1><ul><li>脚踝的灵活性、稳定性、力量都难以通过养伤养好，你还需要进行康复训练。被动休息治疗结合<strong>主动康复训练</strong>才能最大程度恢复受损的功能。</li><li>脚踝康复应当按照恢复活动度—恢复力量—恢复平衡能力—恢复爆发力的顺序进行</li><li><img src="https://raw.githubusercontent.com/ctguljj/ctguljj.github.io/master/images/ctgu1.jpg" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;崴脚恢复&quot;&gt;&lt;a href=&quot;#崴脚恢复&quot; class=&quot;headerlink&quot; title=&quot;崴脚恢复&quot;&gt;&lt;/a&gt;崴脚恢复&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;脚踝的灵活性、稳定性、力量都难以通过养伤养好，你还需要进行康复训练。被动休息治疗结合&lt;strong&gt;主动康复训练
      
    
    </summary>
    
      <category term="身体健康" scheme="ctguljj.github.io/categories/%E8%BA%AB%E4%BD%93%E5%81%A5%E5%BA%B7/"/>
    
      <category term="崴脚" scheme="ctguljj.github.io/categories/%E8%BA%AB%E4%BD%93%E5%81%A5%E5%BA%B7/%E5%B4%B4%E8%84%9A/"/>
    
    
      <category term="身体健康" scheme="ctguljj.github.io/tags/%E8%BA%AB%E4%BD%93%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>blog写作2</title>
    <link href="ctguljj.github.io/2019/03/01/blog%E5%86%99%E4%BD%9C2/"/>
    <id>ctguljj.github.io/2019/03/01/blog写作2/</id>
    <published>2019-03-01T04:17:39.000Z</published>
    <updated>2019-03-01T05:36:57.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><ul><li>description是文章的描述,在每篇文章标题下方显示</li><li>有date,tags,categories,comments,password(要配置),keywords,updated</li><li>layout页面布局，默认为post,有draft(草稿)和page</li><li>符号 : 为英文符号,格式很重要,不管是主题配置文件还是站点配置文件中空格,不空格都有要求</li><li>permalink若站点配置文件下的 permalink 配置了 title 则可以替换文章 URL 里面的 title（文章标题）</li><li>还有photos,link,image,sticky(后面2个要配置)</li><li>若创建文章时标题错误,可在编辑md文件时通过titile修改,文件重命名没用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Front-matter&quot;&gt;&lt;a href=&quot;#Front-matter&quot; class=&quot;headerlink&quot; title=&quot;Front-matter&quot;&gt;&lt;/a&gt;Front-matter&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;description是文章的描述,在每篇文章标
      
    
    </summary>
    
      <category term="blog" scheme="ctguljj.github.io/categories/blog/"/>
    
      <category term="文章模板" scheme="ctguljj.github.io/categories/blog/%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF/"/>
    
    
      <category term="blog" scheme="ctguljj.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>blog写作</title>
    <link href="ctguljj.github.io/2019/02/28/blog%E5%86%99%E4%BD%9C/"/>
    <id>ctguljj.github.io/2019/02/28/blog写作/</id>
    <published>2019-02-28T06:58:00.000Z</published>
    <updated>2019-03-02T04:34:20.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博客写作"><a href="#hexo博客写作" class="headerlink" title="hexo博客写作"></a>hexo博客写作</h1><ul><li>若layout为draft,那么静态页面不会渲染生成。</li><li>符号-、1.和文本之间要保留一个字符的空格.</li><li><h1 id="和「一级标题」之间建议保留一个字符的空格，这是最标准的-Markdown-写法。如果不空格-标题无法显示。"><a href="#和「一级标题」之间建议保留一个字符的空格，这是最标准的-Markdown-写法。如果不空格-标题无法显示。" class="headerlink" title="和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。如果不空格,标题无法显示。"></a>和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。如果不空格,标题无法显示。</h1></li><li>引用符号&gt; 和文本之间要保留一个字符的空格<blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote></li></ul><ul><li><p>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。例如：<br><em>一盏灯</em>， 一片昏黄；<strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></li><li><p>Markdwon 文档写完一段回车后务必<strong>再回车一次空一行！</strong></p></li><li>需要引用代码时，如果引用的语句只有一段，不分行，可以用符号` 将语句包起来。</li><li>如果引用的语句为多行，可以将<code>`</code>置于这段代码的首行和末行，</li></ul><h1 id="markdown快速键入"><a href="#markdown快速键入" class="headerlink" title="markdown快速键入"></a>markdown快速键入</h1><blockquote></blockquote><p>mdi + tab键：插入图片<br>mdl + tab键: 插入链接<br>mdc + tab键：插入代码<br>mdh1 + tab键：插入一级标题，2就是二级标题……</p>]]></content>
    
    <summary type="html">
    
      关于博客写作即markdown语法相关知识
    
    </summary>
    
      <category term="blog" scheme="ctguljj.github.io/categories/blog/"/>
    
      <category term="markdown" scheme="ctguljj.github.io/categories/blog/markdown/"/>
    
    
      <category term="blog" scheme="ctguljj.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>颈椎养护手册</title>
    <link href="ctguljj.github.io/2019/02/28/%E9%A2%88%E6%A4%8E%E5%85%BB%E6%8A%A4%E6%89%8B%E5%86%8C/"/>
    <id>ctguljj.github.io/2019/02/28/颈椎养护手册/</id>
    <published>2019-02-28T05:21:06.000Z</published>
    <updated>2019-03-02T04:34:44.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日常不良习惯"><a href="#日常不良习惯" class="headerlink" title="日常不良习惯"></a>日常不良习惯</h1><ul><li>当你的距离不能够清楚的看清屏幕是你就会头向前伸，此时颈椎压力变大；而当你的距离不能够把胳膊自然下垂放在桌上或者椅子上的时候，手肘就会悬空，此时肩膀压力变大去承担手臂的重量！</li><li>使用过高或者过低的枕头，而和高枕头一样不好的就是不睡枕头，让脖子悬空。这两种情况都会让颈部肌肉紧张，无法放松，还会导致颈椎排列结构的改变</li></ul><h1 id="养护"><a href="#养护" class="headerlink" title="养护"></a>养护</h1><p>1.习惯侧睡的可以选择高一点的枕头，喜欢平躺仰卧的可以选择低一点，睡觉建议选择记忆棉枕头。不要窝着睡觉！！！脖子底下一定要有枕头！！！侧睡的枕头大概1.5倍拳头的高，仰睡的枕头大概一个拳头那么高！！！</p><p>2.睡前如果身体僵硬难受，千万别直接入睡，一定要冲个热水澡或者扭动身体让身体放松，否则第二天早上起来容易落枕或者有其他疼痛。 </p><p>3.必须要严格制定运动计划，并且保持至少一个小时就起来溜达溜达，伸腰踢腿.</p><p>4.我们眼睛看的屏幕一定要跟眼睛在同一水平线上，同时远近合适，这样可以避免低头和往前探后。</p><p>5.拉伸组合：上、右转、右上、右下、右歪、左歪、左下、左上、左、回正，记住，速度要慢，每次停留至少10秒</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日常不良习惯&quot;&gt;&lt;a href=&quot;#日常不良习惯&quot; class=&quot;headerlink&quot; title=&quot;日常不良习惯&quot;&gt;&lt;/a&gt;日常不良习惯&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;当你的距离不能够清楚的看清屏幕是你就会头向前伸，此时颈椎压力变大；而当你的距离不能够把胳膊自然下
      
    
    </summary>
    
      <category term="身体健康" scheme="ctguljj.github.io/categories/%E8%BA%AB%E4%BD%93%E5%81%A5%E5%BA%B7/"/>
    
      <category term="颈椎" scheme="ctguljj.github.io/categories/%E8%BA%AB%E4%BD%93%E5%81%A5%E5%BA%B7/%E9%A2%88%E6%A4%8E/"/>
    
    
      <category term="身体健康" scheme="ctguljj.github.io/tags/%E8%BA%AB%E4%BD%93%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
</feed>
