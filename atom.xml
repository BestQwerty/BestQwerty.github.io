<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LjJiaJun&#39; Home</title>
  
  <subtitle>书青春 - 话人生 | Coding - Thinking - Acting</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="ctguljj.github.io/"/>
  <updated>2019-04-14T06:55:31.980Z</updated>
  <id>ctguljj.github.io/</id>
  
  <author>
    <name>LjJiaJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>matlab常用函数之unique</title>
    <link href="ctguljj.github.io/2019/04/14/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bunique/"/>
    <id>ctguljj.github.io/2019/04/14/matlab常用函数之unique/</id>
    <published>2019-04-14T06:55:31.000Z</published>
    <updated>2019-04-14T06:55:31.980Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>matlab常用函数之sum</title>
    <link href="ctguljj.github.io/2019/04/13/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bsum/"/>
    <id>ctguljj.github.io/2019/04/13/matlab常用函数之sum/</id>
    <published>2019-04-13T06:08:55.000Z</published>
    <updated>2019-04-13T06:13:53.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h1><ul><li>其实<code>sum(a)</code>默认的是<code>sum(a,1)</code>,还有<code>sum(a,2)</code>。<ul><li><code>sum(a,1)</code>把矩阵的每一列分别加起来形成新的行矩阵。</li><li><code>sum(a,2)</code>把矩阵的每一行分别加起来形成新的列矩阵。</li></ul></li><li>提示：矩阵a是行矩阵时，<code>sum(a)</code>不再是<code>sum(a,1)</code>,而转换为了<code>sum(a,2)</code>。</li><li>求一个矩阵所有元素<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">clc,clear;</span><br><span class="line">close all;</span><br><span class="line">a = [<span class="number">1</span> <span class="number">2</span> </span><br><span class="line">    <span class="number">3</span> <span class="number">4</span></span><br><span class="line">    <span class="number">5</span> <span class="number">6</span>];</span><br><span class="line">sum(a)</span><br><span class="line">sum(sum(a))</span><br><span class="line">sum(a(:))</span><br><span class="line">sum(a(:, :)) <span class="comment">%a(:, :)与原矩阵相同</span></span><br><span class="line"><span class="comment">%answer</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">9</span>    <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">21</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">    <span class="number">21</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">     <span class="number">9</span>    <span class="number">12</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      😃
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="sum" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/sum/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab矩阵操作补充</title>
    <link href="ctguljj.github.io/2019/04/13/matlab%E7%9F%A9%E9%98%B5%E6%93%8D%E4%BD%9C%E8%A1%A5%E5%85%85/"/>
    <id>ctguljj.github.io/2019/04/13/matlab矩阵操作补充/</id>
    <published>2019-04-13T04:01:11.000Z</published>
    <updated>2019-04-14T13:19:22.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><ul><li><p>删除例题2中第1、3、5、7行以及第3、8列。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">a=<span class="built_in">ones</span>(<span class="number">10</span>);  </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:<span class="number">10</span>    </span><br><span class="line">     a(<span class="built_in">i</span>,:)=<span class="built_in">i</span>; </span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"> a( <span class="number">1</span>:<span class="number">2</span>:<span class="number">7</span> , :)  = [ ];</span><br><span class="line"> a( : , [<span class="number">3</span> <span class="number">8</span>] ) = [ ]; <span class="comment">%体会[]与：的运用</span></span><br><span class="line"> a</span><br></pre></td></tr></table></figure></li><li><p><strong>矩阵与某数字相加</strong>，所有元素全部加上这个数字，构成新矩阵。数字相减也是一样</p></li><li><strong>数字与矩阵相乘</strong>，也是所有元素全部乘以这个数字，构成新矩阵。除法也是</li></ul><h1 id="创建、串联和扩展矩阵"><a href="#创建、串联和扩展矩阵" class="headerlink" title="创建、串联和扩展矩阵"></a>创建、串联和扩展矩阵</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/math/creating-and-concatenating-matrices.html" target="_blank" rel="noopener">创建、串联和扩展矩阵</a><h2 id="串联矩阵"><a href="#串联矩阵" class="headerlink" title="串联矩阵"></a>串联矩阵</h2></li><li>可以使用方括号将现有矩阵连接在一起。这种创建矩阵的方法称为串联。</li><li>要串联两个矩阵，它们的大小必须兼容。也就是说，水平串联矩阵时，它们的行数必须相同。垂直串联矩阵时，它们的列数必须相同。</li><li>串联矩阵的另一种方法是使用串联函数，如 horzcat，它可以水平串联两个兼容的输入矩阵。</li></ul><h2 id="扩展矩阵"><a href="#扩展矩阵" class="headerlink" title="扩展矩阵"></a>扩展矩阵</h2><ul><li><p>通过将一个或多个元素置于现有行和列索引边界之外，可以将它们添加到矩阵中。MATLAB 会<strong>自动</strong>用 <strong>0 填充矩阵</strong>，使其保持为矩形。例如，创建一个 2×3 矩阵，然后在 (3,4) 的位置插入一个元素，使矩阵增加一行一列。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">10</span>  <span class="number">20</span>  <span class="number">30</span>; <span class="number">60</span>  <span class="number">70</span>  <span class="number">80</span>]</span><br><span class="line"><span class="comment">%A = 2×3</span></span><br><span class="line">    <span class="number">10</span>    <span class="number">20</span>    <span class="number">30</span></span><br><span class="line">    <span class="number">60</span>    <span class="number">70</span>    <span class="number">80</span></span><br><span class="line">A(<span class="number">3</span>,<span class="number">4</span>) = <span class="number">1</span> </span><br><span class="line"><span class="comment">%A = 3×4</span></span><br><span class="line">    <span class="number">10</span>    <span class="number">20</span>    <span class="number">30</span>     <span class="number">0</span></span><br><span class="line">    <span class="number">60</span>    <span class="number">70</span>    <span class="number">80</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>可以通过在现有索引范围之外插入新矩阵来扩展其大小。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">10</span>  <span class="number">20</span>  <span class="number">30</span>; <span class="number">60</span>  <span class="number">70</span>  <span class="number">80</span>]</span><br><span class="line"><span class="comment">%A = 2×3</span></span><br><span class="line">    <span class="number">10</span>    <span class="number">20</span>    <span class="number">30</span></span><br><span class="line">    <span class="number">60</span>    <span class="number">70</span>    <span class="number">80</span></span><br><span class="line">A(<span class="number">3</span>,<span class="number">4</span>) = <span class="number">1</span> </span><br><span class="line">A(<span class="number">4</span>:<span class="number">5</span>,<span class="number">5</span>:<span class="number">6</span>) = [<span class="number">2</span> <span class="number">3</span>; <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="comment">%A = 5×6</span></span><br><span class="line">    <span class="number">10</span>    <span class="number">20</span>    <span class="number">30</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">    <span class="number">60</span>    <span class="number">70</span>    <span class="number">80</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">4</span>     <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>要重复扩展矩阵的大小，例如在 for 循环中，通常最好要为预计创建的最大矩阵预分配空间。如果没有预分配空间，MATLAB 必须在每次大小增加时分配内存，因此会降低操作速度。例如，通过将矩阵的元素初始化为零，预分配一个最多容纳 10000 行和 10000 列的矩阵。<code>A = zeros(10000,10000);</code><br><strong>如果之后还要预分配更多元素，可以通过在矩阵索引范围之外指定元素或将另一个预分配的矩阵与 A 串联来进行扩展。</strong></p><ul><li>就是先定义一个大小矩阵</li></ul></li></ul><h1 id="基本运算的兼容数组大小"><a href="#基本运算的兼容数组大小" class="headerlink" title="基本运算的兼容数组大小"></a>基本运算的兼容数组大小</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/compatible-array-sizes-for-basic-operations.html" target="_blank" rel="noopener">基本运算的兼容数组大小</a></li><li>大多数二元（两个输入）运算符和函数都支持具有兼容大小的数值数组。对于每个维度，如果两个输入的<strong>维度大小相同或其中一个为 1</strong>，则这些输入将具有兼容的大小。以最简单的情况为例，如果两个数组大小完全相同或其中一个为标量，则这两个数组大小是兼容的。执行按元素运算或函数时，MATLAB 会将大小兼容的数组隐式扩展为相同的大小。</li></ul><h2 id="大小不兼容的输入"><a href="#大小不兼容的输入" class="headerlink" title="大小不兼容的输入"></a>大小不兼容的输入</h2><ul><li>不兼容的输入的大小无法隐式扩展为相同的大小。例如：<ul><li>其中一个维度大小不相等，并且维度大小均不为 1。<ul><li>A: 3-by-2</li><li>B: 4-by-2</li></ul></li><li>两个长度不相同的非标量行向量。<ul><li>A: 1-by-3</li><li>B: 1-by-4</li></ul></li></ul></li></ul><h2 id="大小兼容的输入"><a href="#大小兼容的输入" class="headerlink" title="大小兼容的输入"></a>大小兼容的输入</h2><h3 id="二维输入"><a href="#二维输入" class="headerlink" title="二维输入"></a>二维输入</h3><ul><li>以下是一些具有兼容大小的标量、向量和矩阵的组合：<br><img src="https://raw.githubusercontent.com/ctguljj/ctguljj.github.io/master/images/matlab大小兼容的输入.png" alt=""></li></ul><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><ul><li>略</li></ul><h3 id="空数组"><a href="#空数组" class="headerlink" title="空数组"></a>空数组</h3><ul><li>对于空数组或维度大小为零的数组，规则是相同的。不等于 1 的维度大小确定输出的大小。这意味着，<strong>大小为零的维度必须与另一个数组中大小为 1 或 0 的维度进行配对，并且输出的维度大小为 0。</strong><ul><li>A: 1-by-0     </li><li>B: 3-by-1</li><li>Result: 3-by-0</li></ul></li></ul><h2 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h2><ul><li>要简化向量-矩阵运算，请对维函数（例如 sum、mean、min 以及其他）使用隐式扩展。</li><li>行向量和列向量相加<ul><li>行向量和列向量的大小兼容，当您对它们执行运算时，结果为一个矩阵。</li></ul></li></ul><h1 id="使用关系运算符进行数组比较"><a href="#使用关系运算符进行数组比较" class="headerlink" title="使用关系运算符进行数组比较"></a>使用关系运算符进行数组比较</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/array-comparison-with-relational-operators.html" target="_blank" rel="noopener">文档</a></li><li>关系运算符使用“小于”、“大于”和“不等于”等运算符对操作数进行定量比较。- 关系比较的结果是一个逻辑数组，指示关系为 true 的位置。</li></ul><h2 id="数组比较"><a href="#数组比较" class="headerlink" title="数组比较"></a>数组比较</h2><h3 id="数值数组"><a href="#数值数组" class="headerlink" title="数值数组"></a>数值数组</h3><ul><li>关系运算符会在两个数组之间执行<strong>按元素比较</strong>。<strong>数组的大小必须兼容以便于执行运算。执行计算时，具有兼容大小的数组会隐式扩展为相同的大小</strong>。以最简单的情况为例，两个操作数为大小相同的数组，或者其中一个操作数为标量。</li><li><p>将一个 1×N 行向量与一个 M×1 列向量进行比较，则 MATLAB 会在执行比较之前将每个向量都扩展为一个 M×N 矩阵。生成的矩阵包含这些向量中元素的每个组合的比较结果。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">1</span>:<span class="number">3</span></span><br><span class="line"><span class="comment">%A =</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">B = [<span class="number">2</span>; <span class="number">3</span>]</span><br><span class="line"><span class="comment">%B =</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">A &gt;= B</span><br><span class="line"><span class="comment">%ans =</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>关系运算符可用于其中有任一维度大小为零的数组，只要两个数组的大小兼容。</p></li></ul><h1 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/math/array-indexing.html" target="_blank" rel="noopener">文档</a><br>-<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>; <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>; <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>; <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span>]</span><br><span class="line"><span class="comment">%A = 4×4</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></span><br><span class="line">     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span></span><br><span class="line">     <span class="number">9</span>    <span class="number">10</span>    <span class="number">11</span>    <span class="number">12</span></span><br><span class="line">    <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span>    <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%可以在一个向量中指定多个元素的索引，从而一次引用多个元素。例如，访问 A 的第二行中的第一个和第三个元素。</span></span><br><span class="line">r = A(<span class="number">2</span>,[<span class="number">1</span> <span class="number">3</span>])</span><br><span class="line"><span class="comment">%r = 1×2</span></span><br><span class="line">     <span class="number">5</span>     <span class="number">7</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用逻辑值进行索引"><a href="#使用逻辑值进行索引" class="headerlink" title="使用逻辑值进行索引"></a>使用逻辑值进行索引</h2><ul><li>使用 true 和 false 逻辑指示符也可以对数组进行索引，在处理条件语句时尤其便利</li><li><p>矩阵 A 中的元素是否小于另一个矩阵 B 中的对应元素。当 A 中的元素小于 B 中的对应元素时，小于号运算符返回元素为 1 的逻辑数组。 </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clc,clear;</span><br><span class="line">A = [<span class="number">1</span> <span class="number">2</span> <span class="number">6</span></span><br><span class="line">    <span class="number">4</span> <span class="number">3</span> <span class="number">6</span>];</span><br><span class="line">B = [<span class="number">0</span> <span class="number">3</span> <span class="number">7</span></span><br><span class="line">    <span class="number">3</span> <span class="number">7</span> <span class="number">5</span>];</span><br><span class="line">ind = A&lt;B</span><br><span class="line"><span class="comment">%现在已经知道满足条件的元素的位置，可以使用 ind 作为索引数组来检查各个值。MATLAB 将 ind 中值 1 的位置与 A 和 B 中的对应元素进行匹配，并在列向量中列出它们的值。</span></span><br><span class="line">Avals = A(ind)</span><br><span class="line">Bvals = B(ind)</span><br><span class="line"></span><br><span class="line"><span class="comment">%ans</span></span><br><span class="line">ind =</span><br><span class="line">     <span class="number">0</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">1</span>     <span class="number">0</span></span><br><span class="line">Avals =</span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">     <span class="number">6</span></span><br><span class="line">Bvals =</span><br><span class="line">     <span class="number">3</span></span><br><span class="line">     <span class="number">7</span></span><br><span class="line">     <span class="number">7</span></span><br></pre></td></tr></table></figure></li><li><p>MATLAB 中的 is 函数(前面带is的函数)还<strong>返回逻辑数组</strong>，指示输入中的哪些元素满足特定条件。</p></li></ul><h1 id="查找符合条件的数组元素"><a href="#查找符合条件的数组元素" class="headerlink" title="查找符合条件的数组元素"></a>查找符合条件的数组元素</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/find-array-elements-that-meet-a-condition.html" target="_blank" rel="noopener">文档</a></li></ul><h2 id="应用单个条件"><a href="#应用单个条件" class="headerlink" title="应用单个条件"></a>应用单个条件</h2><ul><li><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">clc,clear;</span><br><span class="line">a = [<span class="number">1</span> <span class="number">2</span></span><br><span class="line">    <span class="number">3</span> <span class="number">4</span> </span><br><span class="line">    <span class="number">5</span> <span class="number">6</span></span><br><span class="line">    <span class="number">7</span> <span class="number">8</span>];</span><br><span class="line">b = a &gt; <span class="number">5</span></span><br><span class="line">a(b)</span><br><span class="line"><span class="built_in">i</span> = <span class="built_in">find</span>(a &gt; <span class="number">5</span>)</span><br><span class="line">a(<span class="built_in">i</span>)</span><br><span class="line"><span class="comment">%answer</span></span><br><span class="line">b =</span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">     <span class="number">7</span></span><br><span class="line">     <span class="number">6</span></span><br><span class="line">     <span class="number">8</span></span><br><span class="line"><span class="built_in">i</span> =</span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">7</span></span><br><span class="line">     <span class="number">8</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">     <span class="number">7</span></span><br><span class="line">     <span class="number">6</span></span><br><span class="line">     <span class="number">8</span></span><br></pre></td></tr></table></figure></li></ul><p>结果为一个逻辑矩阵。b 中的每个值都表示为逻辑值 1 (true) 或逻辑值 0 (false) 的状态，以指示 a 的对应元素是否符合条件 a&gt;5。</p><ul><li>虽然 b 包含有关 a 中哪些元素大于 5 的信息，但它不会指出这些元素的具体值是多少。您可以使用 b 创建 a 的索引，而不必逐元素比较这两个矩阵。</li><li>结果为一个由 a 中大于 5 的元素组成的列向量。由于 b 为逻辑矩阵，因此该运算称为<strong>逻辑索引</strong></li><li>find函数结果为一个由线性索引组成的列向量。每个索引描述a 中一个大于5的元素的位置，因此实际上 a(i) 与 a(b) 返回的结果相同。差别在于 a(b) 使用逻辑索引，而 a(i) 使用<strong>线性索引</strong>。</li></ul><h2 id="应用多个条件"><a href="#应用多个条件" class="headerlink" title="应用多个条件"></a>应用多个条件</h2><ul><li>可以使用逻辑 and、or 和 not 运算符将任意多个条件应用于一个数组；条件的数量并不局限于一个或两个。</li><li><p>逻辑索引</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">clc,clear;</span><br><span class="line">a = [<span class="number">1</span> <span class="number">2</span></span><br><span class="line">    <span class="number">3</span> <span class="number">4</span> </span><br><span class="line">    <span class="number">5</span> <span class="number">6</span></span><br><span class="line">    <span class="number">7</span> <span class="number">8</span></span><br><span class="line">    <span class="number">9</span> <span class="number">10</span>];</span><br><span class="line">b = a(a &gt; <span class="number">5</span>&amp; ~<span class="built_in">mod</span>(a, <span class="number">2</span>))</span><br><span class="line">c = a(a &gt; <span class="number">5</span>&amp; ~<span class="built_in">mod</span>(a, <span class="number">2</span>)&amp;a ~= <span class="number">8</span>)</span><br><span class="line">t = <span class="built_in">find</span>(a &gt; <span class="number">5</span>&amp; ~<span class="built_in">mod</span>(a, <span class="number">2</span>)&amp;a ~= <span class="number">8</span>);</span><br><span class="line">d = a(t)</span><br><span class="line">e = a(a &gt; <span class="number">2</span>&amp;a &lt;<span class="number">5</span>)</span><br><span class="line">f = a(<span class="number">2</span>&lt;a&lt;<span class="number">5</span>)</span><br><span class="line"><span class="comment">%结果为 a 中同时符合这两个条件的元素的列表。</span></span><br><span class="line"><span class="comment">%务必使用单独的语句指定每个条件，并用逻辑运算符连接起来。</span></span><br><span class="line"><span class="comment">%例如，不能通过 a(2 &lt; a &lt; 5) 指定以上条件，因为其计算结果为 A(2&lt;A | A&lt;5)。</span></span><br><span class="line"><span class="comment">%ans</span></span><br><span class="line">b =</span><br><span class="line">     <span class="number">6</span></span><br><span class="line">     <span class="number">8</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">c =</span><br><span class="line">     <span class="number">6</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">d =</span><br><span class="line">     <span class="number">6</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">e =</span><br><span class="line">     <span class="number">3</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">f =</span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">     <span class="number">5</span></span><br><span class="line">     <span class="number">7</span></span><br><span class="line">     <span class="number">9</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">6</span></span><br><span class="line">     <span class="number">8</span></span><br><span class="line">    <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>查找 a 中大于 5 且为偶数的元素。</p></li><li>结果为 a 中大于5的所有偶数元素的列表。<strong>使用逻辑 NOT 运算符 ~ 将矩阵 mod(A,2) 转换为逻辑矩阵</strong>，并在可被 2 整除的元素位置放置逻辑值 1 (true)。</li></ul><h2 id="替换符合条件的值"><a href="#替换符合条件的值" class="headerlink" title="替换符合条件的值"></a>替换符合条件的值</h2><ul><li>有时，同时更改多个现有数组元素的值会很有用。将逻辑索引与简单的赋值语句一起使用，可替换数组中符合条件的值。</li><li><p>将 a 中大于 10 的所有值替换为数值 10。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">clc,clear;</span><br><span class="line">a = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">    <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line">    <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line">    <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>];</span><br><span class="line">a(a&gt;<span class="number">10</span>) = <span class="number">10</span></span><br><span class="line"><span class="comment">%将 a 中不等于 10 的所有值替换为 NaN 值。</span></span><br><span class="line">a(a~=<span class="number">10</span>) = <span class="built_in">nan</span></span><br><span class="line"><span class="comment">%将 a中的所有 NaN 值替换为 0，并应用逻辑 NOT 运算符 ~A。</span></span><br><span class="line">a(<span class="built_in">isnan</span>(a)) = <span class="number">0</span></span><br><span class="line">c = ~a</span><br><span class="line"></span><br><span class="line"><span class="comment">%ans</span></span><br><span class="line">a =</span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span></span><br><span class="line">     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span></span><br><span class="line">     <span class="number">9</span>    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span></span><br><span class="line">    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span></span><br><span class="line">a =</span><br><span class="line">   NaN   NaN   NaN   NaN</span><br><span class="line">   NaN   NaN   NaN   NaN</span><br><span class="line">   NaN    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span></span><br><span class="line">    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span></span><br><span class="line">a =</span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span></span><br><span class="line">    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span>    <span class="number">10</span></span><br><span class="line">c =</span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>生成的矩阵用逻辑值 1 (true) 取代 NaN 值，用逻辑值 0 (false) 取代 10。逻辑 NOT 运算 ~a 将数值数组转换为逻辑数组，因此 a&amp;c 返回逻辑值 0 (false) 的矩阵，a|c 返回逻辑值 1 (true) 的矩阵。</p></li></ul><h1 id="数组与矩阵运算"><a href="#数组与矩阵运算" class="headerlink" title="数组与矩阵运算"></a>数组与矩阵运算</h1><ul><li>注意matlab版本</li><li>MATLAB® 具有两种不同类型的算术运算：数组运算和矩阵运算。您可以使用这些算术运算来执行数值计算，例如两数相加、计算数组元素的给定次幂或两个矩阵相乘。</li><li>矩阵运算遵循线性代数的法则。与之不同，数组运算则是执行逐元素运算并支持多维数组。句点字符 (.) 将数组运算与矩阵运算区别开来。但是，由于矩阵运算和数组运算在加法和减法的运算上相同，因此没有必要使用字符组合 .+ 和 .-。</li><li><a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/array-vs-matrix-operations.html" target="_blank" rel="noopener">数组与矩阵运算</a></li></ul><h2 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h2><ul><li>数组运算可针对向量、矩阵和多维数组的对应元素执行逐元素运算。如果操作数的大小相同，则第一个操作数中的每个元素都会与第二个操作数中同一位置的元素匹配。如果操作数的大小兼容，则每个输入都会根据需要进行隐式扩展以匹配另一个输入的大小。</li><li><p>如果一个操作数是标量，而另一个操作数不是标量，则 MATLAB 会将该标量隐式扩展为与另一个操作数具有相同的大小。例如，您可以计算一个标量和一个矩阵的按元素乘积。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="comment">%A =</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line"><span class="number">3.</span>*A</span><br><span class="line"><span class="comment">%ans =</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span></span><br></pre></td></tr></table></figure></li><li><p>如果从一个 3×3 矩阵中减去一个 1×3 向量，隐式扩展仍然会起作用，因为它们的大小是兼容的。当您执行减法运算时，该向量将隐式扩展为一个 3×3 矩阵。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>; <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>; <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"><span class="comment">%A =</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">2</span>     <span class="number">2</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">3</span>     <span class="number">3</span></span><br><span class="line">m = [<span class="number">2</span> <span class="number">4</span> <span class="number">6</span>]</span><br><span class="line"><span class="comment">%m =</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">4</span>     <span class="number">6</span></span><br><span class="line">A - m</span><br><span class="line"><span class="comment">%ans =</span></span><br><span class="line">    <span class="number">-1</span>    <span class="number">-3</span>    <span class="number">-5</span></span><br><span class="line">     <span class="number">0</span>    <span class="number">-2</span>    <span class="number">-4</span></span><br><span class="line">     <span class="number">1</span>    <span class="number">-1</span>    <span class="number">-3</span></span><br></pre></td></tr></table></figure></li><li><p>行向量和列向量的大小兼容。如果您将一个 1×3 向量与一个 2×1 向量相加，则每个向量都会在 MATLAB 执行按元素加法之前隐式扩展为一个 2×3 矩阵。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="comment">%x =</span></span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">y = [<span class="number">10</span>; <span class="number">15</span>]</span><br><span class="line"><span class="comment">%y =</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">15</span></span><br><span class="line">x + y</span><br><span class="line"><span class="comment">%ans =</span></span><br><span class="line">    <span class="number">11</span>    <span class="number">12</span>    <span class="number">13</span></span><br><span class="line">    <span class="number">16</span>    <span class="number">17</span>    <span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p>如果两个操作数的大小不兼容，则将会收到错误消息。</p></li></ul><h2 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h2><ul><li>矩阵运算遵循<strong>线性代数的法则</strong>，与多维数组不兼容</li></ul>]]></content>
    
    <summary type="html">
    
      😏
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="矩阵" scheme="ctguljj.github.io/categories/matlab/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="基础" scheme="ctguljj.github.io/categories/matlab/%E7%9F%A9%E9%98%B5/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>maltab常用函数之isempty</title>
    <link href="ctguljj.github.io/2019/04/13/maltab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bisempty/"/>
    <id>ctguljj.github.io/2019/04/13/maltab常用函数之isempty/</id>
    <published>2019-04-13T03:11:58.000Z</published>
    <updated>2019-04-14T08:40:43.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="isempty"><a href="#isempty" class="headerlink" title="isempty"></a>isempty</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/ref/isempty.html?lang=en" target="_blank" rel="noopener">文档</a></li><li>Syntax: <code>TF = isempty(A)</code><ul><li>Description<ul><li><code>TF = isempty(A)</code> returns logical 1 (true) if A is empty, and logical 0 (false) otherwise. An empty array, table, or timetable has at least one dimension with length 0, such as 0-by-0 or 0-by-5.</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      🙂
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="isempty" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/isempty/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab常用函数之xlim及其相关函数</title>
    <link href="ctguljj.github.io/2019/04/11/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bxlim%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/"/>
    <id>ctguljj.github.io/2019/04/11/matlab常用函数之xlim及其相关函数/</id>
    <published>2019-04-11T14:50:31.000Z</published>
    <updated>2019-04-11T15:12:08.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xlim"><a href="#xlim" class="headerlink" title="xlim"></a>xlim</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/ref/xlim.html" target="_blank" rel="noopener">文档</a></li><li><a href="http://www.ece.northwestern.edu/local-apps/matlabhelp/techdoc/ref/ylim.html" target="_blank" rel="noopener">相关网站</a></li><li>含义:(x limit)设置或查询 x 坐标轴范围</li><li>调用格式:y有多种，暂时写一种<ul><li><code>xlim([xmin xmax])</code>sets the axis limits in the current axes to the specified values.<ul><li>将当前轴中的轴限制设置为指定的值。</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      😋
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="xlim,ylim,zlim" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/xlim-ylim-zlim/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab常用函数之pdist与squareform</title>
    <link href="ctguljj.github.io/2019/04/11/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bpdist%E5%92%8Csquareform/"/>
    <id>ctguljj.github.io/2019/04/11/matlab常用函数之pdist和squareform/</id>
    <published>2019-04-11T09:05:16.000Z</published>
    <updated>2019-04-13T03:19:01.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pdist"><a href="#pdist" class="headerlink" title="pdist"></a>pdist</h1><ul><li><a href="https://ww2.mathworks.cn/help/stats/pdist.html" target="_blank" rel="noopener">文档</a></li><li>调用格式:<ul><li><code>D = pdist(X)</code>returns the Euclidean distance between pairs of observations in X.<ul><li>一个矩阵A的大小为M<em>N，那么B=pdist(A)得到的矩阵B的大小为1行M</em>(M-1)/2列，表示的意义是M行数据，每两行计算一下欧式距离<code>pdist(x,distance)</code>,distance也可以用来表示其他距离，默认的是欧式距离。</li><li>返回函数中的观测对之间的欧几里得距离</li></ul></li><li><code>D = pdist(X,Distance)</code> returns the distance by using the method specified by Distance. </li><li><code>D = pdist(X,Distance,DistParameter)</code> returns the distance by using the method specified by Distance and DistParameter. You can specify DistParameter only when Distance is ‘seuclidean’, ‘minkowski’, or ‘mahalanobis’.</li></ul></li><li>Distance — Distance metric<ul><li>Distance metric, specified as a character vector, string scalar, or function handle, as described in the following table.</li><li>metric’取值如下： ‘euclidean’：欧氏距离（默认）；</li></ul></li><li>栗子:Compute the Euclidean distance between pairs of observations, and convert the distance vector to a matrix using squareform.<ul><li>计算观测对之间的欧氏距离，并用squareform将距离矢量转换为矩阵。<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">rng(<span class="string">'default'</span>) <span class="comment">% For reproducibility</span></span><br><span class="line">X = <span class="built_in">rand</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">%生成矩阵坐标，第一列为横坐标，第二列为纵坐标</span></span><br><span class="line">D = pdist(X)</span><br><span class="line"><span class="comment">%answer</span></span><br><span class="line">D = <span class="number">1</span>×<span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0.2954</span>    <span class="number">1.0670</span>    <span class="number">0.9448</span></span><br><span class="line"><span class="comment">%**The pairwise distances are arranged in the order (2,1), (3,1), (3,2)**. **You can easily locate the distance between observations i and j by using squareform.**</span></span><br><span class="line"><span class="comment">%**如果a是3*2矩阵，那么pdist函数计算欧几里德距离的顺序是第二行与第一行计算欧几里得距离，然后是第3行于第一行计算欧几里得距离，最后是第3行与第2行的欧几里德距离**</span></span><br><span class="line"><span class="comment">% 如果`b = squareform(pdist(a))`，那么`b(i,j)`就是矩阵a第i行与第j行之间的欧几里得距离</span></span><br><span class="line">Z = squareform(D)</span><br><span class="line">Z = <span class="number">3</span>×<span class="number">3</span></span><br><span class="line"></span><br><span class="line">         <span class="number">0</span>    <span class="number">0.2954</span>    <span class="number">1.0670</span></span><br><span class="line">    <span class="number">0.2954</span>         <span class="number">0</span>    <span class="number">0.9448</span></span><br><span class="line">    <span class="number">1.0670</span>    <span class="number">0.9448</span>         <span class="number">0</span></span><br><span class="line"><span class="comment">%squareform returns a symmetric matrix **where Z(i,j) corresponds to the pairwise distance between observations i and j**. For example,** you can find the distance between observations 2 and 3.**</span></span><br><span class="line"><span class="comment">%squareform返回一个对称矩阵，**其中Z(i,j)对应于观察i和j之间的成对距离。**</span></span><br><span class="line">Z(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">ans</span> = <span class="number">0.9448</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%验证pdist函数计算行顺序</span></span><br><span class="line">clc,clear;</span><br><span class="line">a = [<span class="number">0</span> <span class="number">0</span></span><br><span class="line">    <span class="number">3</span> <span class="number">4</span></span><br><span class="line">    <span class="number">5</span> <span class="number">6</span>];</span><br><span class="line">b = pdist(a);</span><br><span class="line">d = <span class="built_in">sqrt</span>(<span class="number">3</span>^<span class="number">2</span>+<span class="number">4</span>^<span class="number">2</span>)</span><br><span class="line">e = <span class="built_in">sqrt</span>(<span class="number">5</span>^<span class="number">2</span>+<span class="number">6</span>^<span class="number">2</span>)</span><br><span class="line">g = <span class="built_in">sqrt</span>(<span class="number">2</span>^<span class="number">2</span>+<span class="number">2</span>^<span class="number">2</span>)</span><br><span class="line">b</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      😝
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="pdist" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/pdist/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab常用函数之isprime</title>
    <link href="ctguljj.github.io/2019/04/11/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bisprime/"/>
    <id>ctguljj.github.io/2019/04/11/matlab常用函数之isprime/</id>
    <published>2019-04-11T08:56:33.000Z</published>
    <updated>2019-04-11T09:00:14.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="isprime"><a href="#isprime" class="headerlink" title="isprime"></a>isprime</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/ref/isprime.html" target="_blank" rel="noopener">文档</a></li><li>调用格式:<ul><li><code>TF = isprime(X)</code> 返回与 X 大小相同的逻辑数组。如果 X(i) 为质数，则 TF(i) 的值为 true。否则，值为 false。</li></ul></li><li>栗子:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf = <span class="built_in">isprime</span>([<span class="number">2</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">10</span>])</span><br><span class="line">tf = <span class="number">1</span>x5 logical array</span><br><span class="line">   <span class="number">1</span>   <span class="number">1</span>   <span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span></span><br><span class="line"><span class="comment">%2 和 3 是质数，但 0、6 和 10 不是。</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      😆
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="isprime" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/isprime/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab常用函数之primes</title>
    <link href="ctguljj.github.io/2019/04/11/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bprimes/"/>
    <id>ctguljj.github.io/2019/04/11/matlab常用函数之primes/</id>
    <published>2019-04-11T08:49:49.000Z</published>
    <updated>2019-04-11T08:55:49.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/ref/primes.html" target="_blank" rel="noopener">文档</a></li><li>调用格式:<ul><li><code>p = primes(n)</code>返回包含所有小于或等于 n 的质数的行向量。p 与 n 具有相同的数据类型。</li></ul></li><li>栗子:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="built_in">primes</span>(<span class="number">25</span>)</span><br><span class="line">p = <span class="number">1</span>×<span class="number">9</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">3</span>     <span class="number">5</span>     <span class="number">7</span>    <span class="number">11</span>    <span class="number">13</span>    <span class="number">17</span>    <span class="number">19</span>    <span class="number">23</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      😘
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="primes" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/primes/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab常用函数之symsum</title>
    <link href="ctguljj.github.io/2019/04/10/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bsymsum/"/>
    <id>ctguljj.github.io/2019/04/10/matlab常用函数之symsum/</id>
    <published>2019-04-10T12:04:39.000Z</published>
    <updated>2019-04-11T08:29:23.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学期望问题"><a href="#数学期望问题" class="headerlink" title="数学期望问题"></a>数学期望问题</h1><p><img src="https://raw.githubusercontent.com/ctguljj/ctguljj.github.io/master/images/matlab之数学期望问题2.png" alt=""><br><img src="https://raw.githubusercontent.com/ctguljj/ctguljj.github.io/master/images/matlab之数学期望问题.png" alt=""></p><ul><li><a href="http://www.doc88.com/p-6671800827880.html" target="_blank" rel="noopener">原地址</a></li></ul><h1 id="symsum"><a href="#symsum" class="headerlink" title="symsum"></a>symsum</h1><ul><li><a href="https://ww2.mathworks.cn/help/symbolic/symsum.html" target="_blank" rel="noopener">symsum文档</a></li><li>调用格式:<ul><li><code>F = symsum(f,k,a,b)</code> returns the sum of the series with terms that expression f specifies, which depend on symbolic variable k. The value of k ranges from a to b. If you do not specify the variable, symsum uses the variable that symvar determines. If f is a constant, then the default variable is x.<ul><li>返回表达式f指定的一系列项的和，这些项依赖于符号变量k。k的值范围从a到b。如果不指定变量，symsum将使用symvar确定的变量。如果f是常数，那么默认变量是x。</li></ul></li><li><code>F = symsum(f,k)</code></li></ul></li><li>栗子:  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">syms k x</span><br><span class="line"> S1 = symsum(k^<span class="number">2</span>, k, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">S2 = symsum(<span class="number">1</span>/k^<span class="number">2</span>, k, <span class="number">1</span>, Inf)</span><br><span class="line"> S3 = symsum(x^k/<span class="built_in">factorial</span>(k), k, <span class="number">0</span>, Inf)<span class="comment">%分母为阶乘</span></span><br><span class="line"> <span class="comment">%answer</span></span><br><span class="line"> S1 =</span><br><span class="line"> <span class="number">385</span></span><br><span class="line"> S2 =</span><br><span class="line"> <span class="built_in">pi</span>^<span class="number">2</span>/<span class="number">6</span></span><br><span class="line"> S3 =</span><br><span class="line"> <span class="built_in">exp</span>(x)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      嘻嘻
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="symsum" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/symsum/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab常用函数之solve</title>
    <link href="ctguljj.github.io/2019/04/10/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bsolve/"/>
    <id>ctguljj.github.io/2019/04/10/matlab常用函数之solve/</id>
    <published>2019-04-10T11:47:30.000Z</published>
    <updated>2019-04-10T11:55:49.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h1><div class="note info"><p>Character vector inputs have been removed. Instead, use syms to declare variables and replace inputs such as solve(‘2<em>x == 1’,’x’) with solve(2</em>x == 1,x).</p></div><ul><li><p>调用格式:</p><ul><li><code>S = solve(eqn,var)</code>solves the equation eqn for the variable var. If you do not specify var, the symvar function determines the variable to solve for. For example, <code>solve(x + 1 == 2, x)</code> solves the equation x + 1 = 2 for x.</li><li><code>S = solve(eqn,var,Name,Value)</code></li><li><code>Y = solve(eqns,vars)</code></li><li><code>Y = solve(eqns,vars,Name,Value)</code></li><li><code>[y1,...,yN] = solve(eqns,vars)</code></li><li><code>[y1,...,yN] = solve(eqns,vars,Name,Value)</code></li><li><code>[y1,...,yN,parameters,conditions] = solve(eqns,vars,&#39;ReturnConditions&#39;,true)</code></li></ul></li><li><p>栗子:</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%Use the == operator to specify the equation sin(x) == 1 and solve it.</span></span><br><span class="line">syms x</span><br><span class="line">eqn = <span class="built_in">sin</span>(x) == <span class="number">1</span>;</span><br><span class="line">solx = solve(eqn,x)</span><br><span class="line"><span class="comment">%answer:solx = pi/2</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;solve&quot;&gt;&lt;a href=&quot;#solve&quot; class=&quot;headerlink&quot; title=&quot;solve&quot;&gt;&lt;/a&gt;solve&lt;/h1&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Character vector inputs have been r
      
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="solve" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/solve/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>数学期望</title>
    <link href="ctguljj.github.io/2019/04/09/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"/>
    <id>ctguljj.github.io/2019/04/09/数学期望/</id>
    <published>2019-04-09T15:05:42.000Z</published>
    <updated>2019-04-13T12:33:47.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学期望"><a href="#数学期望" class="headerlink" title="数学期望"></a>数学期望</h1><ul><li><img src="https://raw.githubusercontent.com/ctguljj/ctguljj.github.io/master/images/数学期望.jpg" alt=""></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数学期望&quot;&gt;&lt;a href=&quot;#数学期望&quot; class=&quot;headerlink&quot; title=&quot;数学期望&quot;&gt;&lt;/a&gt;数学期望&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ctguljj/ctgu
      
    
    </summary>
    
      <category term="数学" scheme="ctguljj.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="数学期望" scheme="ctguljj.github.io/categories/%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B/"/>
    
    
      <category term="数学" scheme="ctguljj.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>砝码组合</title>
    <link href="ctguljj.github.io/2019/04/08/%E7%A0%9D%E7%A0%81%E7%BB%84%E5%90%88/"/>
    <id>ctguljj.github.io/2019/04/08/砝码组合/</id>
    <published>2019-04-08T15:30:58.000Z</published>
    <updated>2019-04-08T15:30:58.619Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>递归与迭代</title>
    <link href="ctguljj.github.io/2019/04/06/%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3/"/>
    <id>ctguljj.github.io/2019/04/06/递归与迭代/</id>
    <published>2019-04-06T11:20:16.000Z</published>
    <updated>2019-04-06T12:06:41.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="递归与迭代"><a href="#递归与迭代" class="headerlink" title="递归与迭代"></a>递归与迭代</h1><ul><li>递归中一定有迭代,但是迭代中不一定有递归,大部分可以相互转换。</li><li>能用迭代的不用递归,递归调用函数,浪费空间,并且递归太深容易造成堆栈的溢出./<em>相对</em>/</li><li>迭代是从远到近，不断逼近answer<ul><li>利用变量的原值推算出变量的一个新值，迭代就是A不停的调用B.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;递归与迭代&quot;&gt;&lt;a href=&quot;#递归与迭代&quot; class=&quot;headerlink&quot; title=&quot;递归与迭代&quot;&gt;&lt;/a&gt;递归与迭代&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;递归中一定有迭代,但是迭代中不一定有递归,大部分可以相互转换。&lt;/li&gt;
&lt;li&gt;能用迭代的不用递归,递
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="递归与迭代" scheme="ctguljj.github.io/categories/c/%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3/"/>
    
    
      <category term="c++" scheme="ctguljj.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>二进制与位运算</title>
    <link href="ctguljj.github.io/2019/04/06/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>ctguljj.github.io/2019/04/06/二进制与位运算/</id>
    <published>2019-04-06T08:04:52.000Z</published>
    <updated>2019-04-06T13:20:12.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位运算与乘除法的换算"><a href="#位运算与乘除法的换算" class="headerlink" title="位运算与乘除法的换算"></a>位运算与乘除法的换算</h1><ul><li>说明：<br>（1）位运算符中除 ~ 外，均为二目运算符，即要求出侧各有一个运算量。<br>（2）运算早只能是整型或字符型的数据，不能为实型数据。</li><li>使用位移运算可以提高因乘除运算带来的效率的问题，它的缺点是存在精度损失且不直观。</li><li>使用移位运算来避免乘法运算是一种常用技巧，不过乘数必须都是正整数，而且必须至少有一个是 2 的 n 次方，例如：2，4，8，16，32……移位运算的特点是速度快，而乘法运算速度较慢，把乘法运算转化为移位运算可以稍微提高程序运行效率。</li><li>例题1：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//乘法</span></span><br><span class="line"><span class="number">12</span> * <span class="number">2</span> = <span class="number">12</span> &lt;&lt; <span class="number">1</span></span><br><span class="line"><span class="number">12</span> * <span class="number">4</span> = <span class="number">12</span> &lt;&lt; <span class="number">2</span></span><br><span class="line"><span class="number">12</span> * <span class="number">8</span> = <span class="number">12</span> &lt;&lt; <span class="number">3</span></span><br><span class="line"><span class="number">12</span> * <span class="number">16</span> = <span class="number">12</span> &lt;&lt; <span class="number">4</span></span><br><span class="line"><span class="number">12</span> * <span class="number">32</span> = <span class="number">12</span> &lt;&lt; <span class="number">5</span></span><br><span class="line"><span class="number">12</span> * <span class="number">64</span> = <span class="number">12</span> &lt;&lt; <span class="number">6</span></span><br><span class="line"><span class="number">12</span> * <span class="number">128</span> = <span class="number">12</span> &lt;&lt; <span class="number">7</span></span><br><span class="line"><span class="number">12</span> * <span class="number">256</span> = <span class="number">12</span> &lt;&lt; <span class="number">8</span></span><br><span class="line"><span class="comment">//除法</span></span><br><span class="line"><span class="number">12</span> / <span class="number">2</span> = <span class="number">12</span> &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="number">12</span> / <span class="number">4</span> = <span class="number">12</span> &gt;&gt; <span class="number">2</span></span><br><span class="line"><span class="number">12</span> / <span class="number">8</span> = <span class="number">12</span> &gt;&gt; <span class="number">3</span></span><br><span class="line"><span class="number">12</span> / <span class="number">16</span> = <span class="number">12</span> &gt;&gt; <span class="number">4</span></span><br><span class="line"><span class="number">12</span> / <span class="number">32</span> = <span class="number">12</span> &gt;&gt; <span class="number">5</span></span><br><span class="line"><span class="number">12</span> / <span class="number">64</span> = <span class="number">12</span> &gt;&gt; <span class="number">6</span></span><br><span class="line"><span class="number">12</span> / <span class="number">128</span> = <span class="number">12</span> &gt;&gt; <span class="number">7</span></span><br><span class="line"><span class="number">12</span> / <span class="number">256</span> = <span class="number">12</span> &gt;&gt; <span class="number">8</span></span><br><span class="line"><span class="comment">//其它</span></span><br><span class="line">num *= <span class="number">32</span>;  </span><br><span class="line"><span class="comment">//等同于 </span></span><br><span class="line">num &lt;&lt;= <span class="number">5</span>; </span><br><span class="line"><span class="comment">/* 2 的 5 次方等于 32 */</span> </span><br><span class="line"><span class="comment">//如果乘数不是 2 的 n 次方，我们可以把乘数分解成几个 2 的 n 次方的和：</span></span><br><span class="line"> num *= <span class="number">20</span>;</span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line"> num *= (<span class="number">16</span> + <span class="number">4</span>);</span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line"> num = num * <span class="number">16</span> + num * <span class="number">4</span>;</span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line">num = (num &lt;&lt; <span class="number">4</span>) + (num &lt;&lt; <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><ul><li>原码:指一个二进制数左边加上符号位后所得到的码，且当二进制数大于0时，符号位为0；二进制数小于0时，符号位为1；二进制数等于0时，符号位可以为0或1</li><li>反码：正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。</li><li>补码：正数的补码与原码相同，负数的补码是其对应正数二进制所有位取反后加1。</li><li><strong>在计算机中通常使用补码进行储存</strong>。</li><li>二进制的最末位为0表示该数是偶数，最末位为1表示该数为奇数</li></ul><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h2 id="“-”运算"><a href="#“-”运算" class="headerlink" title="“~”运算"></a>“~”运算</h2><p>又称取反运算，就是对一个二进制数按位取反。<br>对于 int 来说，<code>~x = −x−1</code></p><h2 id="“-amp-”运算"><a href="#“-amp-”运算" class="headerlink" title="“&amp;”运算"></a>“&amp;”运算</h2><ul><li>“&amp;”运算，即“and” 运算，也是一种逻辑运算符，对于二进制运算来说，“&amp;”运算的意义是对于两个二进制数的每一位，除了11得1，其他均为0</li><li>可以用 &amp; 运算判断一个数是奇数还是偶数，当 x 为奇数时， x 二进制下的第 0 位一定是 1 ，否则为 0 。我们让<code>x &amp; 1</code>，就可以知道 x 的奇偶性了。<ul><li>&amp;<strong>运算通常用于二进制取位操作</strong>，例如一个数 &amp;1的结果就是<strong>取</strong>二进制的<strong>最末位</strong>。所以可以用来判断奇偶性</li><li>举个栗子：<code>10101(21) &amp; 11100(28) = 10100{20}</code></li></ul></li><li>如果参加 &amp; 是负数（<code>-3 &amp; -5</code>），则以补码形式表示为二进制数。然后按位进行 与 运算。<h2 id="“-”-运算"><a href="#“-”-运算" class="headerlink" title="“|” 运算"></a>“|” 运算</h2></li><li>即 “or” 运算，也是一种逻辑运算符，对于二进制运算来说，“|” 运算的意义是对于两个二进制数的每一位，除了00得0，其它都是1<ul><li>举个栗子：<code>10101(21) | 11100(28) = 11101(29)</code></li></ul></li><li>通过与运算和或运算的栗子可以观察到一下规律：<code>x &amp; y&lt;=x</code>和<code>x | y&gt;=x</code></li></ul><h1 id="“-”运算-1"><a href="#“-”运算-1" class="headerlink" title="“^”运算"></a>“^”运算</h1><ul><li>“^”运算，又称“xor”运算，异或运算。定义是对于两个二进制数的每一位，相同为0，不同为1<ul><li>举个栗子：<code>10101(21) ^ 11100(28) = 1001(9)</code></li></ul></li><li>对于一个形如2∗n 的数 x， <code>x ^ 1=x+1</code>,而对于一个形如 2∗n+1的数x，<code>x ^ 1=x−1</code></li><li>异或运算的妙用：<ul><li>0^0=0,0^1=1 可理解为：0异或任何数，其结果=任何数</li><li>1^0=1,1^1=0 可理解为： 1异或任何数，其结果=任何数取反</li><li>任何数异或自己，等于把自己置0</li><li>异或运算符的特点是：数a两次异或同一个数b（a=a^b^b）仍然为原值a.</li><li>如果 x ^ y=z 那么 y ^ z=x， x ^ z=y </li><li>a xor c == b xor c 则 a == b</li><li>a ^ b = b ^ a</li><li>a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c; </li><li>d = a ^ b ^ c 可以推出 a = d ^ b ^ c. </li><li>a ^ b ^ a = b.</li><li>(a xor b） xor b = a;</li><li>由于xor满足交换律，所以上述特性这样表述也是对的：<ul><li>(b xor a) xor b = a;</li><li>b xor (a xor b) = a;<h2 id="交换2个数"><a href="#交换2个数" class="headerlink" title="交换2个数"></a>交换2个数</h2></li></ul></li></ul></li><li>不借助中间变量，交换两个数有以下方法👇</li><li><p><span id="inline-toc">1.</span> 相互加减</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = a + b;         <span class="comment">//但是加法可能导致溢出</span></span><br><span class="line">b = a - b;       <span class="comment">//x和y同号的情况下容易溢出</span></span><br><span class="line">a = a - b;</span><br><span class="line"></span><br><span class="line">x=x-y;    <span class="comment">//x和y异号的情况下容易溢出</span></span><br><span class="line">y=x+y;</span><br><span class="line">x=y-x;</span><br></pre></td></tr></table></figure></li><li><p><span id="inline-toc">2.</span>异或运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = a^b;</span><br><span class="line">b = a^b;</span><br><span class="line">a = a^b;</span><br><span class="line"><span class="comment">//可简写为如下</span></span><br><span class="line">b ^= a ^= b ^= a;</span><br></pre></td></tr></table></figure></li><li><p>这东西理论上能比正常的交换优一点，当然还是用 swap 吧，毕竟人家什么都能换，这个只能换整数。</p><h2 id="找出2n-1个数中不成对的数"><a href="#找出2n-1个数中不成对的数" class="headerlink" title="找出2n+1个数中不成对的数"></a>找出2n+1个数中不成对的数</h2></li><li>给出n个数，其中有且仅有一个出现了奇数次，其余的都出现了偶数次。用线性时间常数空间找出这个出现奇数次的数<a href="http://www.cnblogs.com/kaituorensheng/archive/2013/04/04/3000033.html" target="_blank" rel="noopener">原</a><br>-<br><img src="https://raw.githubusercontent.com/ctguljj/ctguljj.github.io/master/images/异或运算.png" alt=""><h2 id="lowbit运算"><a href="#lowbit运算" class="headerlink" title="lowbit运算"></a>lowbit运算</h2><h2 id="快速判断奇偶性"><a href="#快速判断奇偶性" class="headerlink" title="快速判断奇偶性"></a>快速判断奇偶性</h2></li><li>上面有<h2 id="在状压情况下的操作"><a href="#在状压情况下的操作" class="headerlink" title="在状压情况下的操作"></a>在状压情况下的操作</h2><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><h1 id="位运算的优先级"><a href="#位运算的优先级" class="headerlink" title="位运算的优先级"></a>位运算的优先级</h1></li><li>位运算的优先级，大致按下面排序<ul><li>加减运算 &gt; 移位运算 &gt; 比较大小运算 &gt; 与运算 &gt; 异或运算 &gt; 或运算</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;位运算与乘除法的换算&quot;&gt;&lt;a href=&quot;#位运算与乘除法的换算&quot; class=&quot;headerlink&quot; title=&quot;位运算与乘除法的换算&quot;&gt;&lt;/a&gt;位运算与乘除法的换算&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;说明：&lt;br&gt;（1）位运算符中除 ~ 外，均为二目运算符，即要求
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="二进制与位运算" scheme="ctguljj.github.io/categories/c/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
      <category term="c++" scheme="ctguljj.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>快速幂</title>
    <link href="ctguljj.github.io/2019/04/06/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>ctguljj.github.io/2019/04/06/快速幂/</id>
    <published>2019-04-06T08:04:09.000Z</published>
    <updated>2019-04-09T15:10:21.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><ul><li><a href="http://www.cnblogs.com/CXCXCXC/p/4641812.html" target="_blank" rel="noopener">直接看吧</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快速幂&quot;&gt;&lt;a href=&quot;#快速幂&quot; class=&quot;headerlink&quot; title=&quot;快速幂&quot;&gt;&lt;/a&gt;快速幂&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/CXCXCXC/p/4641812.html&quot; targ
      
    
    </summary>
    
      <category term="算法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="快速幂" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
    
      <category term="算法" scheme="ctguljj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速幂题解</title>
    <link href="ctguljj.github.io/2019/04/06/%E5%BF%AB%E9%80%9F%E5%B9%82%E9%A2%98%E8%A7%A3/"/>
    <id>ctguljj.github.io/2019/04/06/快速幂题解/</id>
    <published>2019-04-06T07:54:32.000Z</published>
    <updated>2019-04-06T13:44:45.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ac-nowcoder"><a href="#ac-nowcoder" class="headerlink" title="ac.nowcoder"></a>ac.nowcoder</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li>题目描述:立华奏在学习初中数学的时候遇到了这样一道大水题： “设箱子内有 n 个球，其中给 m 个球打上标记，设一次摸球摸到每一个球的概率均等，求一次摸球摸到打标记的球的概率” “emmm…语言入门题” 但是她改了一下询问方式：设最终的答案为 p ,请输出 p 小数点后 K1 到 K2 位的所有数字（若不足则用 0 补齐）</li><li>输入描述:第一行一个整数 T,表示有 T 组数据。接下来每行包含四个整数 m,n,K1,K2，意义如「题目描述」所示。<ul><li>1≤m≤n≤10的9次方,1≤K1≤K2≤10的9次方、0≤K2−K1≤10的5次方，T≤20。</li></ul></li><li>输出描述:输出 T 行，每行输出 K2−K1+1个数，表示答案。注意同行的数字中间不需要用空格隔开。</li></ul><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ul><li>不用从头开始模拟，只需要从 K1 位开始模拟就可以了。 直接通过快速幂+取模算出第 K1位的数字。然后我们发现 K2−K1≤10的5次方，所以暴力枚举除法过程就可以。 时间复杂度 O(n)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ac-nowcoder&quot;&gt;&lt;a href=&quot;#ac-nowcoder&quot; class=&quot;headerlink&quot; title=&quot;ac.nowcoder&quot;&gt;&lt;/a&gt;ac.nowcoder&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;head
      
    
    </summary>
    
      <category term="算法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="快速幂" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
      <category term="题解" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E5%B9%82/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="ctguljj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算几何初步</title>
    <link href="ctguljj.github.io/2019/04/05/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%88%9D%E6%AD%A5/"/>
    <id>ctguljj.github.io/2019/04/05/计算几何初步/</id>
    <published>2019-04-05T09:52:58.000Z</published>
    <updated>2019-04-05T09:52:58.930Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二分抽签算法分析</title>
    <link href="ctguljj.github.io/2019/04/05/%E4%BA%8C%E5%88%86%E6%8A%BD%E7%AD%BE%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>ctguljj.github.io/2019/04/05/二分抽签算法分析/</id>
    <published>2019-04-05T08:41:59.000Z</published>
    <updated>2019-04-08T10:26:21.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法课"><a href="#算法课" class="headerlink" title="算法课"></a>算法课</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*你的朋友提议玩一个游戏：将写有数字的n个纸片放入口袋中．你可以从口袋中抽取4次纸片，每次记下纸片上的数字后都将其放回口袋中如果这4个数字的和是m，就是你赢，否则就是你的朋友赢。你挑战了好几回，结果一次也没赢过，于是怒而撕破口袋，取出所有纸片，检查自己是否真的有赢的可能性。请你编写一个程序，判断当纸片上所写的数字是k1，k2，…，kn时，是否存在抽取4次和为m的方案。如果存在，输出彻；否则，输出NO.</span></span><br><span class="line"><span class="comment">限制条件:   1≤n ≤ 50;   1 ≤ m ≤ 10^8;   1 ≤ Ki ≤ 10^8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例： 3 10 1 3 5             (格式-n,m, k1,k2,..kn)</span></span><br><span class="line"><span class="comment">输出样例：YES</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入样例：3 9 1 3 5 </span></span><br><span class="line"><span class="comment">输出样例：NO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> kk[<span class="number">1000000</span>];<span class="comment">//开大点防止爆掉        </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bs</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = n*n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> k = left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(kk[k] == b)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( m &gt;kk[k])</span><br><span class="line">            left = k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = k;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>  ( j=<span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            kk[i*n + j] = a[i]+a[j];<span class="comment">//枚举组合</span></span><br><span class="line">    sort(kk, kk+n*n); </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>( bs(m-a[i]-a[j]) )&#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法课&quot;&gt;&lt;a href=&quot;#算法课&quot; class=&quot;headerlink&quot; title=&quot;算法课&quot;&gt;&lt;/a&gt;算法课&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="算法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二分法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
      <category term="题解" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%B3%95/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="ctguljj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>matlab常用函数之mean</title>
    <link href="ctguljj.github.io/2019/04/04/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Bmean/"/>
    <id>ctguljj.github.io/2019/04/04/matlab常用函数之mean/</id>
    <published>2019-04-04T13:18:25.000Z</published>
    <updated>2019-04-13T06:18:09.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mean-数组的均值"><a href="#mean-数组的均值" class="headerlink" title="mean(数组的均值)"></a>mean(数组的均值)</h1><ul><li><a href="https://ww2.mathworks.cn/help/matlab/ref/mean.html" target="_blank" rel="noopener">文档</a></li><li><p>调用格式:</p><ul><li><p><code>M = mean(A)</code>返回 A 沿大小不等于 1 的第一个数组维度的元素的均值。</p><ul><li>如果 A 是向量，则<code>mean(A)</code>返回元素均值。</li><li>如果 A 为矩阵，那么 <code>mean(A)</code> <strong>返回包含每列均值的行向量。</strong></li><li>如果 A 是多维数组，则 <code>mean(A)</code> 沿大小不等于 1 的第一个数组维度计算，并将这些元素视为向量。此维度会变为 1，而所有其他维度的大小保持不变。</li><li><code>mean(a)</code>默认的是<code>mean(a,1)</code>。</li><li>矩阵a是行矩阵时，<code>mean(a)</code>不再是<code>mean(a,1)</code>,而转换为了<code>mean(a,2)</code>。</li><li>要求总平均值，可以：<code>mean( a(:) )</code>,下面还有几种方法</li></ul></li><li><p><code>M = mean(A,&#39;all&#39;)</code>计算 A 的所有元素的均值。</p></li><li><code>M = mean(A,dim)</code>返回维度 dim 上的均值。例如，如果 A 为矩阵，则 <code>mean(A,2)</code> 是包含每一行均值的列向量。</li><li><code>M = mean(A,vecdim)</code>计算向量 vecdim 所指定的维度上的均值。例如，如果 A 是矩阵，则 <code>mean(A,[1 2])</code>是 <strong>A 中所有元素的均值</strong>，因为<strong>矩阵的每个元素都包含在由维度 1 和 2 定义的数组切片中</strong>。</li><li><code>M = mean(___,outtype)</code>使用前面语法中的任何输入参数返回指定的数据类型的均值。outtype 可以是 ‘default’、’double’ 或 ‘native’。</li><li><code>M = mean(___,nanflag)</code>指定在上述任意语法的计算中包括还是忽略 NaN 值。<code>mean(A,&#39;includenan&#39;)</code> 会在计算中包括所有 NaN 值，而 <code>mean(A,&#39;omitnan&#39;)</code> 则忽略这些值。</li></ul></li><li>栗子:<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">%创建一个矩阵并计算每列的均值</span></span><br><span class="line">A = [<span class="number">0</span> <span class="number">1</span> <span class="number">1</span>; <span class="number">2</span> <span class="number">3</span> <span class="number">2</span>; <span class="number">1</span> <span class="number">3</span> <span class="number">2</span>; <span class="number">4</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"><span class="comment">%A = 4×3</span></span><br><span class="line">    <span class="number">0</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">    <span class="number">2</span>     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">    <span class="number">1</span>     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">    <span class="number">4</span>     <span class="number">2</span>     <span class="number">2</span></span><br><span class="line">M = <span class="built_in">mean</span>(A)</span><br><span class="line"><span class="comment">%M = 1×3</span></span><br><span class="line">    <span class="number">1.7500</span>    <span class="number">2.2500</span>    <span class="number">1.7500</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      😄
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="mean" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/mean/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>matlab常用函数之rem</title>
    <link href="ctguljj.github.io/2019/04/04/matlab%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B9%8Brem/"/>
    <id>ctguljj.github.io/2019/04/04/matlab常用函数之rem/</id>
    <published>2019-04-04T01:12:04.000Z</published>
    <updated>2019-04-04T12:44:32.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><ul><li>调用格式:<code>r = rem(a,b)</code></li><li><code>r = rem(a,b)</code>返回a除以b后的余数，其中a为被除数，b为除数。这个操作在概念上等于<code>r = a - b.*fix(a./b)</code>，它使用与mod函数不同的舍入。rem函数遵循<code>rem(a,0)</code>为NaN的约定。</li><li><p>例题:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>:<span class="number">5</span>;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line">r = <span class="built_in">rem</span>(a,b)</span><br><span class="line">r =</span><br><span class="line"> <span class="number">1</span>     <span class="number">2</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><code>rem(a,b)</code>finds the remainder after division. If b &lt;&gt; 0, then <code>rem(a,b) = a - fix(a/b)*b</code>. If b = 0 or b = Inf or b = -Inf, then rem returns NaN.<br>The rem function does not support complex numbers: all values must be real numbers.<br>To find the remainder after division of polynomials, use quorem.</p></li><li>当正数与负数取余时，当得到的余数结果的符号希望跟除数(x)一样，用<code>rem()</code>函数；当得到的余数结果的符号希望跟被除数(y)一样，用<code>mod()</code>函数</li><li><code>mod(x,y)</code>与y同号，<code>rem(x,y)</code>与x同号</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rem&quot;&gt;&lt;a href=&quot;#rem&quot; class=&quot;headerlink&quot; title=&quot;rem&quot;&gt;&lt;/a&gt;rem&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;调用格式:&lt;code&gt;r = rem(a,b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r = rem(a,b)&lt;/
      
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="函数" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/"/>
    
      <category term="rem" scheme="ctguljj.github.io/categories/matlab/%E5%87%BD%E6%95%B0/rem/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
</feed>
