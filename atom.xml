<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LjJiaJun&#39; Home</title>
  
  <subtitle>书青春 - 话人生 | Coding - Thinking - Acting</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="ctguljj.github.io/"/>
  <updated>2019-03-22T13:28:19.827Z</updated>
  <id>ctguljj.github.io/</id>
  
  <author>
    <name>LjJiaJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo特殊字符</title>
    <link href="ctguljj.github.io/2019/03/22/hexo%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/"/>
    <id>ctguljj.github.io/2019/03/22/hexo特殊字符/</id>
    <published>2019-03-22T13:20:37.000Z</published>
    <updated>2019-03-22T13:28:19.827Z</updated>
    
    <content type="html"><![CDATA[<ul><li>因为特殊字符，报了一下错误<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path) [Line 5, Column 29]</span><br></pre></td></tr></table></figure></li></ul><p>从宇宙大爆发开始找错误，不过还好没浪费多少时间.记忆深刻，写个blog冷静一下</p><h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><ul><li>hexo特殊字符尽量减少使用，可能在转义时发生错误！如： 2个大括号连在一起！！！！！！！！！！！！！或者中括号！！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;因为特殊字符，报了一下错误&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
      <category term="blog" scheme="ctguljj.github.io/categories/blog/"/>
    
      <category term="特殊字符" scheme="ctguljj.github.io/categories/blog/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/"/>
    
    
      <category term="blog" scheme="ctguljj.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="ctguljj.github.io/2019/03/22/%E6%95%B0%E7%BB%84/"/>
    <id>ctguljj.github.io/2019/03/22/数组/</id>
    <published>2019-03-22T12:10:44.000Z</published>
    <updated>2019-03-22T13:16:10.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><ul><li>二维数组的初始化分为两种，一种是顺序初始化，一种是按行初始化<ul><li>所谓按顺序初始化就是先从左向右再由上而下地初始化，即第一行所有元素都初始化好以后再对第二行初始化。而按行初始化则是用一对大括号来表示每一行，跳过前一行没有初始化的元素，在行内从左向右地进行初始化。</li><li><code>int array1[3][2]={4,2,5,6}; 顺序初始化</code></li><li><code>int array2[3][2]={ {4,2},{5},{6} }; 按行初始化</code></li><li>对于没有初始化的元素，则都是一个不确定的值。</li></ul></li><li>内存是依靠地址来确定内存中的唯一一个存储单元的，即只有一个参数。所以在内存中，所有的数据都是像一维数组那样顺序存储的。<ul><li>在内存中，先将二维数组的第一行按顺序存储，接着就是第二行的数据，然后是第三行的数据……右图（图7.4）所示的就是一个二维数组在内存中的存储情况。</li><li><img src="/22/数组/" alt=""></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二维数组&quot;&gt;&lt;a href=&quot;#二维数组&quot; class=&quot;headerlink&quot; title=&quot;二维数组&quot;&gt;&lt;/a&gt;二维数组&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;二维数组的初始化分为两种，一种是顺序初始化，一种是按行初始化&lt;ul&gt;
&lt;li&gt;所谓按顺序初始化就是先从左向右再由
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="基础知识" scheme="ctguljj.github.io/categories/c/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="数组" scheme="ctguljj.github.io/categories/c/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="c++" scheme="ctguljj.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>bfs的神奇</title>
    <link href="ctguljj.github.io/2019/03/20/bfs%E7%9A%84%E7%A5%9E%E5%A5%87/"/>
    <id>ctguljj.github.io/2019/03/20/bfs的神奇/</id>
    <published>2019-03-20T13:13:52.000Z</published>
    <updated>2019-03-20T13:13:52.710Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dfs的奥妙</title>
    <link href="ctguljj.github.io/2019/03/20/dfss%E7%9A%84%E5%A5%A5%E5%A6%99/"/>
    <id>ctguljj.github.io/2019/03/20/dfss的奥妙/</id>
    <published>2019-03-20T13:13:12.000Z</published>
    <updated>2019-03-22T13:05:07.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dfs模板"><a href="#dfs模板" class="headerlink" title="dfs模板"></a>dfs模板</h1><ul><li>DFS的重要点在于状态回溯</li><li><code>判出口（终点、越界）-&gt; 剪枝-&gt;扩展-&gt;标记-&gt;递归-&gt;还原</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span><span class="comment">//参数用来表示状态  </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(到达终点状态)  </span><br><span class="line"></span><br><span class="line">    &#123;  </span><br><span class="line"></span><br><span class="line">        ...<span class="comment">//根据题意添加  </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(越界或者是不合法状态)  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(特殊状态)<span class="comment">//剪枝</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(扩展方式)  </span><br><span class="line"></span><br><span class="line">    &#123;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(扩展方式所达到状态合法)  </span><br><span class="line"></span><br><span class="line">        &#123;  </span><br><span class="line"></span><br><span class="line">            修改操作;<span class="comment">//根据题意来添加  </span></span><br><span class="line"></span><br><span class="line">            标记； <span class="comment">//标记可以再开一个另外的数组进行标记 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            dfs（）；  </span><br><span class="line"></span><br><span class="line">            (还原标记)；  </span><br><span class="line"></span><br><span class="line">            <span class="comment">//是否还原标记根据题意  </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果加上（还原标记）就是 回溯法  </span></span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li>如何获得下一个方向的坐标（此处定义一个方向数组）。</li></ul><pre><code>    <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> next[<span class="number">4</span>][<span class="number">2</span>]=&#123;</span><br><span class="line"></span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;<span class="comment">//向右走</span></span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>&#125;<span class="comment">//向下走</span></span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;<span class="comment">//向左走</span></span><br><span class="line">    &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;<span class="comment">//向上走 </span></span><br><span class="line"></span><br><span class="line">   &#125;;</span><br><span class="line">next[i][<span class="number">0</span>]; <span class="comment">//x方向</span></span><br><span class="line">next[i][<span class="number">1</span>]; <span class="comment">//y方向</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">dir[i][<span class="number">0</span>]; <span class="comment">//x方向</span></span><br><span class="line">dir[i][<span class="number">1</span>]; <span class="comment">//y方向</span></span><br></pre></td></tr></table></figure>- 通过这个方向数组，使用循环就可以方便地得到下一步的坐标。     <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">6</span>][<span class="number">6</span>];<span class="comment">//地图；</span></span><br><span class="line"><span class="keyword">bool</span> temp[<span class="number">6</span>][<span class="number">6</span>];<span class="comment">//走过的标记；</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;<span class="comment">//打表；</span></span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//打表；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//定义walk；</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==fx&amp;&amp;y==fy)<span class="comment">//fx表示结束x坐标，fy表示结束y坐标；</span></span><br><span class="line">    &#123;</span><br><span class="line">        total++;<span class="comment">//总数增加；</span></span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//返回，继续搜索；</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)<span class="comment">//0——3是左，右，下，上四个方向；</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[x+dx[i]][y+dy[i]]==<span class="number">0</span>&amp;&amp;<span class="built_in">map</span>[x+dx[i]][y+dy[i]]==<span class="number">1</span>)<span class="comment">//判断没有走过和没有障碍；</span></span><br><span class="line">            &#123;</span><br><span class="line">                temp[x][y]=<span class="number">1</span>;<span class="comment">//走过的地方打上标记；</span></span><br><span class="line">                walk(x+dx[i],y+dy[i]);<span class="comment">//同i!!!!</span></span><br><span class="line">                temp[x][y]=<span class="number">0</span>;<span class="comment">//还原状态；</span></span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 就在地图map数组上打标记（自己走过的路）比较简单，走过的路和障碍可能引起混淆</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dfs模板&quot;&gt;&lt;a href=&quot;#dfs模板&quot; class=&quot;headerlink&quot; title=&quot;dfs模板&quot;&gt;&lt;/a&gt;dfs模板&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;DFS的重要点在于状态回溯&lt;/li&gt;
&lt;li&gt;&lt;code&gt;判出口（终点、越界）-&amp;gt; 剪枝-&amp;gt;
      
    
    </summary>
    
      <category term="算法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dfs" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/dfs/"/>
    
    
      <category term="算法" scheme="ctguljj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>matlab基本操作</title>
    <link href="ctguljj.github.io/2019/03/17/matlab%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>ctguljj.github.io/2019/03/17/matlab基本操作/</id>
    <published>2019-03-17T11:26:31.000Z</published>
    <updated>2019-03-22T13:07:05.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matlabz中变量命名规则"><a href="#matlabz中变量命名规则" class="headerlink" title="matlabz中变量命名规则"></a>matlabz中变量命名规则</h1><ul><li>MATLAB中变量的命名规则是：<ul><li>变量名必须是不含空格的单个词；</li><li>变量名区分大小写；</li><li>变量名最多不超过19个字符；</li><li>变量名必须以字母打头，之后可以是 任意字母、数字或下划线，变量名中，不允许使用标点符号. </li></ul></li></ul><h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><ul><li><strong>分号 ; 表示分隔不想显示计算结果的各语句；矩阵行与行的分隔符</strong> </li><li>续行号 … 长命令行需分行时连接下行用 </li><li>逗号 ， 表示分隔欲显示计算结果的各语句；变量分隔符；矩阵一行中各元素间的分隔符 <h1 id="matlab输入"><a href="#matlab输入" class="headerlink" title="matlab输入"></a>matlab输入</h1></li><li>函数：<ul><li><code>a=input(‘please input a number：’);</code></li><li><code>b=input(‘请输入一个字符串:’,’s’);</code></li><li><code>c=input(‘请输入一个矩阵:’);</code></li></ul></li></ul><h1 id="matlab输出"><a href="#matlab输出" class="headerlink" title="matlab输出"></a>matlab输出</h1><ul><li>不加分号：a=3 a=b a=‘a’ a=zeros(m,n)</li><li><p>函数1：<code>fprintf()</code></p><pre><code>` fprintf(fid,format,A)`</code></pre><ul><li>fid：输出的位置，如果缺省，则输出在命令窗口</li><li>format：输出内容的类型<br>（类型包括：%d:整数  %e:实数  %s:字符串  %f:浮点数）</li><li>A：输入内容的变量名 </li></ul></li><li><p>屏幕输出简单的方法是直接写出欲输出的变量或数组名，后面不加分号。此外，可 以采用 disp 语句，其调用格式为 disp(x)。 </p><ul><li>函数二：disp()<ul><li><code>disp(‘A’);</code></li><li><code>disp(‘numstr(12)’) ;</code>%%numstr()是将其他类型的变量转化成字符串的形式</li><li><code>disp(zeros(m,n));</code></li></ul></li></ul></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">clc,clear;</span><br><span class="line">result = 0;</span><br><span class="line">for i=3:2:101</span><br><span class="line">    result = result + i;</span><br><span class="line">end</span><br><span class="line">disp(result)</span><br></pre></td></tr></table></figure></code></pre><ul><li>MATLAB的每条命令后，若为逗号或无标点符号， 则显示命令的结果；若命令后为分号，则禁止显示结果. </li><li>“%”  后面所有文字为注释. </li><li>“…”表示续行.</li></ul><h1 id="mat文件"><a href="#mat文件" class="headerlink" title="mat文件"></a>mat文件</h1><ul><li>mat文件是matlab的数据存储的标准格式。mat文件是标准的二进制文件,还可以ASCII码形式保存和加载，在MATLAB中打开显示类似于单行EXCEL表格。</li><li>MATLAB是解释型语言，就是说MATLAB命令行中敲入的命令在当前MATLAB进程中被解释运行。但是，每次执行一个任务时敲入长长的命令序列是很烦人的。有两种方法可以使MATLAB的力量得到扩展——脚本和函数。这两种方法都用像emacs一样的文本编辑器中编写的m文件（因为扩展名是.m所以这样命名，m文件还称点m文件）。m文件的好处在于它可以保存命令，还可以轻易地修改命令而无需重新敲入整个命令行。</li><li>所谓mat文件，就是由matlab语言编写的可在matlab语言环境下运行的程序源代码文件。Matlab语言的m文件可分为命令式和函数式两种形式。M文件可在matlab程序编辑器里编写，也可在其他文本编辑器中编写，并以”.m”为拓展名保存。</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><ul><li>矩阵的下标也可以是向量。<ul><li>例如 <code>b=a(x,y)↵；</code>可以得到一个矩阵 b。a 的行标来自向量 x，而列标来自向量 y。 例如，矩阵 a 有 n 列，那末 <code>b=a(:,n:-1:1)</code> 将得到矩阵 b，它等于矩阵 a 按列的逆序排列。 </li></ul></li></ul><ul><li>如果要将一个矩阵存储在计算机中，MATLAB 规定矩阵元素在存储器中的存放次序是 按列的先后顺序存放，即存完第 1 列后，再存第 2 列，依次类推<ul><li>作为矩阵的特例，一维数组或者说向量元素是依其元素本身的先后次序进行存储的。 </li><li>必须指出，不是所有高级语言都这样规定矩阵(或数组)元素的存储次序，例如 C 语言 就是按行的先后顺序来存放数组元素，即存完第 1 行后，再存第 2 行，依次类推。记住这 一点对正确使用高级语言的接口技术是十分有益的。 </li></ul></li></ul><ul><li>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line">a=[2 5 6 9 8 86 4 5 6 65 3 54];</span><br><span class="line">m=a(1);</span><br><span class="line">for i=1:12</span><br><span class="line">    if a(i)&gt;m</span><br><span class="line">        m=a(i);</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=[1,2,3,4,5,6,7];</span><br><span class="line">for i=1:7</span><br><span class="line">a(i)=a(i)+1;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clc,clear</span><br><span class="line">A=[0.5,1.732,0.618,3.1415,1.6,0.9];</span><br><span class="line">for i=1:6</span><br><span class="line">       for j=i:6</span><br><span class="line">             if a(j)&lt;a(i)</span><br><span class="line">                 a(i)=a(i)+a(j);</span><br><span class="line">                 a(j)=a(i)-a(j);</span><br><span class="line">                 a(i)=a(i)-a(j);</span><br><span class="line">              end</span><br><span class="line">        end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clc,clear</span><br><span class="line">for i=1:15</span><br><span class="line">       for j=1:15</span><br><span class="line">             if i+j==15&amp;&amp;4*i+2*j==40</span><br><span class="line">fprintf(‘兔%d只,鸡%d只\n’,i,j);</span><br><span class="line">             end</span><br><span class="line">        end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="diag"><a href="#diag" class="headerlink" title="diag"></a>diag</h2><ul><li><span id="inline-toc">1.</span> diag函数：<code>sum(diag(a)+diag(a&#39;))</code>可以求矩阵a对角线上的元素之和，不过中间的一个元素会提取2次，diag(a’)可以提取副对角线的元素(先将矩阵转置）<ul><li>当Random是向量时，才构成对角矩阵，当Random是m×n矩阵时，得到的是个向量。比如diag([1 3;2 4])得到向量，diag([1 3])得到2×2矩阵。</li><li>可以用来访问对角元素<h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><img src="/17/matlab基本操作/" alt=""><br>()<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2></li></ul></li><li>for 循环允许一组命令以固定的和预定的次数重复。for 循环的一般形式是 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for 循环控制变量=表达式 1:表达式 2:表达式 3 </span><br><span class="line"> 语句             </span><br><span class="line"> end</span><br></pre></td></tr></table></figure><pre><code>- 表达式 1 的值为循环控制变量的初值；表达式 2 的值为步长，每执行循环体一次，循 环控制变量的值将增加步长大小。步长可以为负值，当步长为 1 时，表达式 2 可省略；表 达式 3 为循环控制变量的终值，当循环控制变量的值大于终值时循环结束。在 for 循环中， 循环体内不能出现对循环控制变量的重新设置，否则将会出错；for 循环允许嵌套使用。 </code></pre><ul><li><p>使用 for 循环语句值得注意的是 </p><ul><li><p>for循环不能用循环内重新给循环变量赋值来终止</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=0;</span><br><span class="line">for n=1:4   </span><br><span class="line"> x =x+1</span><br><span class="line">n=5;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code> - for 循环的循环变量= [表达式 1:表达式 2:表达式 3]，其实为一行向量，例如： `[1:2:10]=[ 0  2  4  6  8  10]`，它还可以是数组，其更一般的形式为 `for 循环控制变量 = 数组表达式 语句 end `     - 【例 6.5】 用 for 循环求行向量[-2,5,3,6,-2]各元素之和。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line">   a=[-2,5,3,6,-2]; </span><br><span class="line">s=0;</span><br><span class="line">k=0;</span><br><span class="line">for n=a </span><br><span class="line"> n   %显示每一次循环变量的值 </span><br><span class="line"> k=k+1;  %记录循环次数   </span><br><span class="line">  s=s+n;  %计算行向量 a 各元素之和 </span><br><span class="line">end </span><br><span class="line">k,s   %显示总的循环次数和计算结果</span><br><span class="line">运行结果为 </span><br><span class="line">n =     -2 </span><br><span class="line">n =      5</span><br><span class="line"> n =      3</span><br><span class="line"> n =      6 </span><br><span class="line">n =     -2</span><br><span class="line"> k =      5 </span><br><span class="line">s =     10 </span><br><span class="line">可以看出，总循环次数为 5，第 i 次循环时循环变量的值为 a(i)，计算结果为行向量 a 各元素之和。</span><br></pre></td></tr></table></figure>- 当有一个等效的数组方法来解给定的问题时，应避免用 for 循环。     - 【例 6.9】 比较下面两段程序的执行情况。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">(a) for n=1:10</span><br><span class="line">  x(n)=sin(n*pi/10); </span><br><span class="line">  end   </span><br><span class="line">x </span><br><span class="line">(b) n=1:10; </span><br><span class="line">  x=sin(n*pi/10) </span><br><span class="line">两段程序的运行结果相同，均为 </span><br><span class="line">x = 0.3090  0.5878  0.8090  0.9511  1.0000  0.9511  0.8090  0.5878  0.3090  0.0000 </span><br><span class="line">但后者执行更快，更直观、简便。</span><br></pre></td></tr></table></figure><ul><li>为了得到更快的速度，在 for 循环(while 循环)被执行之前，应预先分配数组。如例 6.9(a)，在 for 循环内每执行一次命令，变量 x 的大小增加 1，迫使 MATLAB 每进行一次循 环都要花费时间对 x 分配更多的内存。为了省去这个步骤，可以在例 6.9(a)程序的首行加入：<code>x=zeros(1,10);    %为 x 分配内存单元</code></li></ul><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><ul><li>其一般形式为 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">                 while 关系表达式</span><br><span class="line">                       语句      </span><br><span class="line">              end </span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 注意：for 循环的循环变量为 m1× m 2×…× m n 维数组，循环次数在一开始就由数组确定为 m2×…× m n，所以在循环体内并不能通过改变循环控制变量的值终止循环；而 while 循环是先执行循环体内的语句，再判断循环的条件是否成立，在循环体内可以通过 改变循环控制变量的值终止循环。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 判断</span><br><span class="line">- try 语句 </span><br><span class="line">- try 语句是 MATLAB 特有的语句，其一般结构是</span><br></pre></td></tr></table></figure><pre><code>        try         语句 1          catch         语句 2          end```                </code></pre><ul><li>elseif与else if不同，前者嵌套if语句时不用end，后者要与else if<br>对应的end</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;matlabz中变量命名规则&quot;&gt;&lt;a href=&quot;#matlabz中变量命名规则&quot; class=&quot;headerlink&quot; title=&quot;matlabz中变量命名规则&quot;&gt;&lt;/a&gt;matlabz中变量命名规则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;MATLAB中变量的命名规则是：
      
    
    </summary>
    
      <category term="matlab" scheme="ctguljj.github.io/categories/matlab/"/>
    
      <category term="基本操作" scheme="ctguljj.github.io/categories/matlab/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="matlab" scheme="ctguljj.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>快排及其优化</title>
    <link href="ctguljj.github.io/2019/03/15/%E5%BF%AB%E6%8E%92%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    <id>ctguljj.github.io/2019/03/15/快排及其优化/</id>
    <published>2019-03-15T15:15:01.000Z</published>
    <updated>2019-03-16T12:02:16.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h1><ul><li>写快排以 a[1] 为基准点太易被卡，可以用 a[(L+r)/2].</li><li>STL 的快排算法的实现其实加入了小数组时冒泡，可能慢的时候用堆排等等优化</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快排&quot;&gt;&lt;a href=&quot;#快排&quot; class=&quot;headerlink&quot; title=&quot;快排&quot;&gt;&lt;/a&gt;快排&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;写快排以 a[1] 为基准点太易被卡，可以用 a[(L+r)/2].&lt;/li&gt;
&lt;li&gt;STL 的快排算法的实现其实加入了小数组
      
    
    </summary>
    
      <category term="算法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="快排及其优化" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/%E5%BF%AB%E6%8E%92%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="算法" scheme="ctguljj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>生成随机数</title>
    <link href="ctguljj.github.io/2019/03/15/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>ctguljj.github.io/2019/03/15/生成随机数/</id>
    <published>2019-03-15T14:37:50.000Z</published>
    <updated>2019-03-15T14:37:50.112Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数学秘密</title>
    <link href="ctguljj.github.io/2019/03/15/%E6%95%B0%E5%AD%A6%E7%A7%98%E5%AF%86/"/>
    <id>ctguljj.github.io/2019/03/15/数学秘密/</id>
    <published>2019-03-15T05:27:44.000Z</published>
    <updated>2019-03-15T08:57:20.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h1><ul><li>在解有关最大公约数、最小公倍数的问题时，常用到以下结论</li></ul><p>　　- （1）如果两个自然数是互质数，那么它们的最大公约数是1，最小公倍数是这两个数的乘积。<br>　　例如8和9，它们是互质数，所以（8，9）=1，[8，9]=72。<br>　　- （2）如果两个自然数中，较大数是较小数的倍数，那么较小数就是这两个数的最大公约数，较大数就是这两个数的最小公倍数。<br>　　例如18与3，18÷3=6，所以（18，3）=3，[18，3]=18。<br>　　- （3）两个整数分别除以它们的最大公约数，所得的商是互质数。<br>　　例如8和14分别除以它们的最大公约数2，所得的商分别为4和7，那么4和7是互质数。<br>　　- （4）两个自然数的最大公约数与它们的最小公倍数的乘积等于这两个数的乘积。<br>　　例如12和16，（12，16）=4，[12，16]=48，有4×48=12×16，即（12，16）× [12，16]=12×16。</p><pre><code>- （5）GCD(a,b) is the smallest positive linear combination of a and b. a与b的最大公约数是最小的a与b的正线性组合,即对于方程xa+yb=c来说,若x,a,y,b都为整数,那么c的最小正根为gcd(a,b).</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最大公约数&quot;&gt;&lt;a href=&quot;#最大公约数&quot; class=&quot;headerlink&quot; title=&quot;最大公约数&quot;&gt;&lt;/a&gt;最大公约数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在解有关最大公约数、最小公倍数的问题时，常用到以下结论&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　- （1）如果两
      
    
    </summary>
    
      <category term="数学基础知识" scheme="ctguljj.github.io/categories/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="数学" scheme="ctguljj.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>最大公约数与最小公倍数</title>
    <link href="ctguljj.github.io/2019/03/14/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/"/>
    <id>ctguljj.github.io/2019/03/14/最大公约数与最小公倍数/</id>
    <published>2019-03-14T10:01:44.000Z</published>
    <updated>2019-03-14T10:01:44.822Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>merge函数</title>
    <link href="ctguljj.github.io/2019/03/13/merge%E5%87%BD%E6%95%B0/"/>
    <id>ctguljj.github.io/2019/03/13/merge函数/</id>
    <published>2019-03-13T10:42:29.000Z</published>
    <updated>2019-03-13T12:56:38.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="merge函数"><a href="#merge函数" class="headerlink" title="merge函数"></a>merge函数</h1><ul><li><p>merge函数的作用是：将两个<strong>有序的序列</strong>合并为一个有序的序列。</p></li><li><p><img src="https://raw.githubusercontent.com/ctguljj/ctguljj.github.io/master/images/merge函数.jpg" alt=""></p></li><li><p>合并操作会合并两个有相同顺序的序列中的元素，<strong>可以是两个升序序列，也可以是两个降序序列</strong>。结果会产生一个包含来自这两个输入序列的元素副本的序列，并且<strong>排序方式和原始序列相同</strong></p></li><li><p>merge() 算法会合并两个序列并将结果保存到第三个序列中，它使用 &lt; 运算符来比较元素。图 1 表明合并操作被运用到 these 和 those 容器的内容上，结果序列保存在 both 容器中。</p></li><li><p>merge() 算法需要 5 个参数。其中前两个指定第一个输入序列的迭代器，在这个示例中是 these，后面两个迭代器指定第二个输入序列，在这个示例中是 those，最后一个参数是一个指定合并元素存放位置的迭代器，即 both 容器。用来指定输入序列的迭代器只需要是最低层次的迭代器，用来保存合并结果的迭代器需要是一个输出迭代器。</p></li><li>当需要使用不同于 &lt; 运算符的其他比较运算时，可以提供一个函数对象用来作为第 6 个参数。</li><li>merge() 算法并没有关于被合并序列容器的信息，所以它们不能创建元素，只能用提供的作为第 5 个参数的迭代器来保存元素。因而在这个示例中，<div class="note primary"><p>目的序列中的元素必须是已经存在的。</p></div>在图 1 中，通过以两个输入容器元素个数之和为指定的元素个数创建一个 both 容器来保证此要求。创建的结果序列可以放在任何位置，甚至可以放在一个源序列容器中，但源序列和目的序列不能重叠；如果它们重叠了，结果是未定义的，但可以肯定的是效果肯定不好。当然，可以用一个插入迭代器来指定目的位置，元素会被自动创建。</li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>指向最后复制元素后一元素的迭代器。<br>merge() 算法返回的迭代器指向合并序列末尾的后一个位置，所以可以通过这个函数调用使用的第 5 个参数加上这个函数返回的迭代器来确定合并序列的范围。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">InputIt1</span>, <span class="title">class</span> <span class="title">InputIt2</span>, <span class="title">class</span> <span class="title">OutputIt</span>, <span class="title">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">constexpr</span> <span class="title">OutputIt</span> <span class="title">merge</span>( <span class="title">InputIt1</span> <span class="title">first1</span>, <span class="title">InputIt1</span> <span class="title">last1</span>,</span></span><br><span class="line"><span class="class">                         <span class="title">InputIt2</span> <span class="title">first2</span>, <span class="title">InputIt2</span> <span class="title">last2</span>,</span></span><br><span class="line"><span class="class">                         <span class="title">OutputIt</span> <span class="title">d_first</span>, <span class="title">Compare</span> <span class="title">comp</span> );</span></span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIt1</span>, <span class="title">class</span> <span class="title">InputIt2</span>, <span class="title">class</span> <span class="title">OutputIt</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">OutputIt</span> <span class="title">merge</span>(<span class="title">InputIt1</span> <span class="title">first1</span>, <span class="title">InputIt1</span> <span class="title">last1</span>,</span></span><br><span class="line"><span class="class">               <span class="title">InputIt2</span> <span class="title">first2</span>, <span class="title">InputIt2</span> <span class="title">last2</span>,</span></span><br><span class="line"><span class="class">               <span class="title">OutputIt</span> <span class="title">d_first</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">for</span> (; first1 != last1; ++d_first) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first2 == last2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">std</span>::copy(first1, last1, d_first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (*first2 &lt; *first1) &#123;</span><br><span class="line">            *d_first = *first2;</span><br><span class="line">            ++first2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *d_first = *first1;</span><br><span class="line">            ++first1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::copy(first2, last2, d_first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="inline-toc">2.</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">InputIt1</span>, <span class="title">class</span> <span class="title">InputIt2</span>, <span class="title">class</span> <span class="title">OutputIt</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">constexpr</span> <span class="title">OutputIt</span> <span class="title">merge</span>( <span class="title">InputIt1</span> <span class="title">first1</span>, <span class="title">InputIt1</span> <span class="title">last1</span>,</span></span><br><span class="line"><span class="class">                         <span class="title">InputIt2</span> <span class="title">first2</span>, <span class="title">InputIt2</span> <span class="title">last2</span>,</span></span><br><span class="line"><span class="class">                         <span class="title">OutputIt</span> <span class="title">d_first</span> );</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIt1</span>, <span class="title">class</span> <span class="title">InputIt2</span>,</span></span><br><span class="line"><span class="class">         <span class="title">class</span> <span class="title">OutputIt</span>, <span class="title">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">OutputIt</span> <span class="title">merge</span>(<span class="title">InputIt1</span> <span class="title">first1</span>, <span class="title">InputIt1</span> <span class="title">last1</span>,</span></span><br><span class="line"><span class="class">               <span class="title">InputIt2</span> <span class="title">first2</span>, <span class="title">InputIt2</span> <span class="title">last2</span>,</span></span><br><span class="line"><span class="class">               <span class="title">OutputIt</span> <span class="title">d_first</span>, <span class="title">Compare</span> <span class="title">comp</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">for</span> (; first1 != last1; ++d_first) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first2 == last2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">std</span>::copy(first1, last1, d_first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (comp(*first2, *first1)) &#123;</span><br><span class="line">            *d_first = *first2;</span><br><span class="line">            ++first2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *d_first = *first1;</span><br><span class="line">            ++first1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::copy(first2, last2, d_first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>归并二个已排序范围 [first1, last1) 和 [first2, last2) 到始于 d_first 的一个已排序范围中。 </p><ul><li>用 operator&lt; 比较元素。</li><li>用给定的二元比较函数 comp 比较元素。</li><li>first1, last1  要归并的元素的第一范围</li><li>first2, last2  要归并到元素的第二范围 </li><li>d_first 目标范围的起始</li></ul></li><li>类型要求<br>-InputIt1, InputIt2 必须满足 LegacyInputIterator 的要求。<br>-ForwardIt1, ForwardIt2, ForwardIt3 必须满足 LegacyForwardIterator 的要求。<br>-OutputIt 必须满足 LegacyOutputIterator 的要求。 </li></ul><h1 id="vector合并"><a href="#vector合并" class="headerlink" title="vector合并"></a>vector合并</h1><ul><li>merge第五个参数即用来存储的第三个vector大小必须预先确定，虽然用vec.begin();可以指向首地址，但是无存储空间</li><li>自己代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">int</span> n, m, i = <span class="number">0</span>, j[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; j[i], a.push_back(j[i]);</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; j[i], b.push_back(j[i]);</span><br><span class="line">merge(a.begin(), a.end(), b.begin(), b.end(), c.begin());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; a.size()+b.size(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;merge函数&quot;&gt;&lt;a href=&quot;#merge函数&quot; class=&quot;headerlink&quot; title=&quot;merge函数&quot;&gt;&lt;/a&gt;merge函数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;merge函数的作用是：将两个&lt;strong&gt;有序的序列&lt;/strong&gt;合并为一
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="常用函数" scheme="ctguljj.github.io/categories/c/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
      <category term="merge" scheme="ctguljj.github.io/categories/c/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/merge/"/>
    
    
      <category term="c++" scheme="ctguljj.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++输入输出</title>
    <link href="ctguljj.github.io/2019/03/12/c-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA-1/"/>
    <id>ctguljj.github.io/2019/03/12/c-输入输出-1/</id>
    <published>2019-03-12T09:12:43.000Z</published>
    <updated>2019-03-12T13:44:33.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="getline函数"><a href="#getline函数" class="headerlink" title="getline函数"></a>getline函数</h1><div class="note primary"><p>C++中有两个getline函数</p></div><ul><li><span id="inline-toc">1.</span>一个是在string头文件中，定义的是一个全局的函数,函数声明是<ul><li><code>istream&amp; getline ( istream &amp;is , string &amp;str , char delim );</code><br><code>istream&amp; getline ( istream&amp; is, string&amp; str);</code><ul><li>is 进行读入操作的输入流</li><li>str 存储读入的内容</li><li>delim 终结符</li></ul></li><li>对于第一个函数delim是可以由用户自己定义的终结符；对于第二个函数delim默认为 ‘\n’（换行符）。</li><li>在遇到终结符delim后，delim会被丢弃，不存入str中。在下次读入操作时，将在delim的下个字符开始读入。</li><li>这个getline是个全局函数，而不是istream/iostream的成员函数getline。</li></ul></li><li><span id="inline-toc">2.</span> 另一个则是istream的成员函数，函数声明是<ul><li><code>istream&amp; getline (char* s, streamsize n )</code></li><li><code>istream&amp; getline (char* s, streamsize n, char delim );</code></li><li>注意这个getline是将读取的字符串存储在char数组中而不可以将该参数声明为string类型，因为C++编译器无法执行此默认转换。！</li><li>输入过程中达到n个数或者提前遇到delim，或者文件结束，输入结束</li></ul></li></ul><ul><li><div class="note default"><p>下面看看就行，待续</p></div></li></ul><p>1、getline读取换行符 并且将换行符替换成’\0’，并且会丢弃换行符，对于getline函数，在函数遇到和结束定界符相等的字符时函数结束，同时函数抽出定界符，此种情况下该定界符既不被放回输入流，也不被放入要生成的字符串</p><p>2、cin会把换行符留在输入队列中</p><p>3、cin.getline读取换行符并替换成’\0’，并且不会主动丢弃换行符，会把它留在输入队列中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;getline函数&quot;&gt;&lt;a href=&quot;#getline函数&quot; class=&quot;headerlink&quot; title=&quot;getline函数&quot;&gt;&lt;/a&gt;getline函数&lt;/h1&gt;&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;C++中有两个getline函数
      
    
    </summary>
    
      <category term="输入输出" scheme="ctguljj.github.io/categories/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    
      <category term="c++" scheme="ctguljj.github.io/categories/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/c/"/>
    
    
      <category term="输入输出" scheme="ctguljj.github.io/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>Dev的秘密</title>
    <link href="ctguljj.github.io/2019/03/11/Dev%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>ctguljj.github.io/2019/03/11/Dev的秘密/</id>
    <published>2019-03-11T14:25:50.000Z</published>
    <updated>2019-03-11T14:29:19.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dev快捷键"><a href="#dev快捷键" class="headerlink" title="dev快捷键"></a>dev快捷键</h1><ul><li>按下Ctrl+Shift+A，会看到DEV帮你整理好了代码。</li><li>Ctrl + shift + 方向键上或下<br>会选中光标当前所在的行，然后将这个行进行上移或下移，移动操作不会覆盖上下相邻的行，只是将位置进行对调。（eclipse则是在嵌套的方法之间做跳转，VS2013没有效果）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dev快捷键&quot;&gt;&lt;a href=&quot;#dev快捷键&quot; class=&quot;headerlink&quot; title=&quot;dev快捷键&quot;&gt;&lt;/a&gt;dev快捷键&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;按下Ctrl+Shift+A，会看到DEV帮你整理好了代码。&lt;/li&gt;
&lt;li&gt;Ctrl + s
      
    
    </summary>
    
      <category term="Dev" scheme="ctguljj.github.io/categories/Dev/"/>
    
    
      <category term="Dev" scheme="ctguljj.github.io/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>迭代器</title>
    <link href="ctguljj.github.io/2019/03/11/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>ctguljj.github.io/2019/03/11/迭代器/</id>
    <published>2019-03-11T05:19:55.000Z</published>
    <updated>2019-03-11T10:33:45.577Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在STL定义的容器中，string，vector与deque提供了随机访问迭代器，list、set、multiset、map、multimap提供了双向迭代器。 </li><li>能进行算术运算的迭代器只有随即访问迭代器，要求容器元素存储在连续内存空间里，vector，string，deque的迭代器是有加减法的，但是map，set，multimap,multiset的迭代器是没有加减法的，list也不可以,map等的迭代器不支持加减操作，仅有++itr，–itr这些操作来进行选择</li><li>Bidirectional迭代器：是在前向迭代器的基础上，多了单步向后遍历的能力。也就是–iter,iter–。</li><li>Random Access迭代器：在双向迭代器基础上，具有直接访问各数据元素的能力。随机迭代器增加了“迭代器算术运算”：</li><li>所有迭代器都应该实现自增算符：iter++,++iter</li><li>STL 中的容器适配器有 stack、queue、priority_queue 三种。它们都是在顺序容器的基础上实现的，屏蔽了顺序容器的一部分功能，突出或增加了另外一些功能。容器适配器是没有迭代器的，因此 STL 中的各种排序、查找、变序等算法都不适用于容器适配器。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在STL定义的容器中，string，vector与deque提供了随机访问迭代器，list、set、multiset、map、multimap提供了双向迭代器。 &lt;/li&gt;
&lt;li&gt;能进行算术运算的迭代器只有随即访问迭代器，要求容器元素存储在连续内存空间里，ve
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="迭代器" scheme="ctguljj.github.io/categories/stl/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>string</title>
    <link href="ctguljj.github.io/2019/03/10/string/"/>
    <id>ctguljj.github.io/2019/03/10/string/</id>
    <published>2019-03-10T14:53:23.000Z</published>
    <updated>2019-03-10T14:56:58.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a, b;</span><br><span class="line">.....</span><br><span class="line">a = a + b;<span class="comment">//将a+b前后连接，对于string来说有些符号重载定义</span></span><br><span class="line"><span class="comment">// ‘ + ’暂且理解为前后连接，所以前后不同，结果不同</span></span><br><span class="line"><span class="comment">//string作为容器，可以和字符串、字符相加，也可以和string相加</span></span><br><span class="line"><span class="comment">//具体原因不知道</span></span><br><span class="line"><span class="comment">//待续</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;string&quot;&gt;&lt;a href=&quot;#string&quot; class=&quot;headerlink&quot; title=&quot;string&quot;&gt;&lt;/a&gt;string&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="string" scheme="ctguljj.github.io/categories/stl/string/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>高精度算法</title>
    <link href="ctguljj.github.io/2019/03/10/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>ctguljj.github.io/2019/03/10/高精度算法/</id>
    <published>2019-03-10T08:10:39.000Z</published>
    <updated>2019-03-14T08:42:12.671Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>前言:由于计算机运算是有模运算,数据范围的表示有一定限制,如整型int(C++中int 与long相同)表达范围是(-2^31~2^31-1),unsigned long(无符号整数)是(0~2^32-1),都约为几十亿.如果采用实数型,则能保存最大的double只能提供15~16位的有效数字,即只能精确表达数百万亿的数.因此,在计算位数超过十几位的数时,不能采用现有类型,只能自己编程计算.</p></li><li><p>由于数计算时可能要进位,因此为了方便,将数由低位到高位依次存在数组下标对应由低到高位置上,另外,我们申请数组大小时,一般考虑了最大的情况,在很多情况下,表示有富余,即高位有很多0,可能造成无效的运算和判断,因此,我们一般将数组的第0个下标对应位置来存储该数的位数.如数:3485(三千四百八十五)，表达在数组a[10]上情况是:</p></li><li><p>下标　　0  　 1　   2   　3   　　4 　  5    6    7    8    9<br>内容　　4   　5  　 8   　4   　　3  　 0    0    0    0    0</p><pre><code>说明：位数   个位  十位  百位　千位</code></pre></li><li><p><strong>倒序存储</strong></p></li><li><p>面对高精度类型的题我们只需要像竖式一样从低位到高位计算，最后进行处理</p></li><li><p>注：高精度计算时一般用正数，对于负数，通过处理符号位的修正，在程序实现上用一个变量来存储符号位，用另一个数组存差的绝对值，置符号位：判断被减数是否大于减数：大则将符号位置为空；小则将符号位置为“- ”，交换减数与被减数；</p></li><li><p>memset可用fill代替</p></li><li>在以后的学习中为了加快计算速度,也可用数组的一个元素表示数的多位数字(该内容可以进一步优化<a href="https://baike.baidu.com/item/高精度计算/2671214#2" target="_blank" rel="noopener">一个链接</a>)<ul><li>以下的方法的有明显的缺点：<ul><li>（1）浪费空间：一个整型变量（-32768~32767）只存放一位（0~9）；</li><li>（2）浪费时间：一次加减只处理一位；</li><li>针对以上问题，如下优化：一个数组元素存放四位数；（integer的最大范围是32767，5位的话可能导致出界）将标准数组改为紧缩数组</li></ul></li></ul></li></ul><h1 id="高精度数的存储"><a href="#高精度数的存储" class="headerlink" title="高精度数的存储"></a>高精度数的存储</h1><ul><li><p>１．如对数采用的字符串输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>;<span class="comment">//最多100位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[N+<span class="number">1</span>],i;</span><br><span class="line"><span class="built_in">string</span> s1;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1;<span class="comment">//数s1</span></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)); <span class="comment">//数组清0</span></span><br><span class="line">a[<span class="number">0</span>]=s1.length(); <span class="comment">//位数</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++) a[i]=s1[a[<span class="number">0</span>]-i]-<span class="string">'0'</span>;<span class="comment">//将字符转为数字并倒序存储．</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.直接读入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>;<span class="comment">//最多100位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[N+<span class="number">1</span>],i,s,key;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;key;<span class="comment">//数key</span></span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)); <span class="comment">//数组清0</span></span><br><span class="line">i=<span class="number">0</span>;<span class="comment">//第0位</span></span><br><span class="line"><span class="keyword">while</span>(key)  <span class="comment">//当key大于0</span></span><br><span class="line">&#123;</span><br><span class="line">  a[++i]=key%<span class="number">10</span>;<span class="comment">//取第i位的数</span></span><br><span class="line">  key=key/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">0</span>]=i; <span class="comment">//共i位数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.直接初始化(用a[]存储)</p><ul><li>初始化为0: <code>memset(a,0,sizeof(a));</code></li><li>初始化为1: <code>memset(a,0,sizeof(a));a[0]=1;a[1]=1;</code></li></ul></li></ul><div class="note warning"><p>以下程序都只写函数，不写完整程序，所有高精度数存储都满足上述约定。(序号为1的)</p></div><h1 id="高精度数的比较"><a href="#高精度数的比较" class="headerlink" title="高精度数的比较"></a>高精度数的比较</h1><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span>   <span class="comment">//比较a和b的大小关系，若a&gt;b则为1，a&lt;b则为-1,a=b则为0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">0</span>]&gt;b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//a的位数大于b则a比b大</span></span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">0</span>]&lt;b[<span class="number">0</span>]) </span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//a的位数小于b则a比b小</span></span><br><span class="line"><span class="keyword">for</span>(i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)  <span class="comment">//从高位到低位比较</span></span><br><span class="line">     &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i]&gt;b[i]) </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i]&lt;b[i])</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//各位都相等则两数相等。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span>clear内联函数中if语句不可以删掉，如果2个输入都为0，在执行玩第一个语句后，全被删除，为空，所以if语句是输入全为0的情况！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">//清除前缀0，如果结果是空字符串则设为0 </span></span><br><span class="line">   <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="built_in">string</span>&amp; a)</span></span>&#123;</span><br><span class="line">       <span class="keyword">while</span>(a.length()&gt;<span class="number">0</span> &amp;&amp; a[<span class="number">0</span>]==<span class="string">'0'</span>)</span><br><span class="line">           a.erase(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span>(a == <span class="string">""</span>)</span><br><span class="line">         a = <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果a&gt;=b则返回真（如果包含前缀零会被消除） </span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isBigger</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">      clear(a);</span><br><span class="line">      clear(b);</span><br><span class="line">      <span class="keyword">if</span>(a.length() &gt; b.length())</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">if</span>(a.length()==b.length() &amp;&amp; a&gt;=b)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="高精度数的加法"><a href="#高精度数的加法" class="headerlink" title="高精度数的加法"></a>高精度数的加法</h1><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span> <span class="comment">//计算a=a+b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k;</span><br><span class="line">k=a[<span class="number">0</span>]&gt;b[<span class="number">0</span>]?a[<span class="number">0</span>]:b[<span class="number">0</span>]; <span class="comment">//k是a和b中位数最大的一个的位数</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>]+=(a[i]+b[i])/<span class="number">10</span>;  <span class="comment">//若有进位，则先进位</span></span><br><span class="line">    a[i]=(a[i]+b[i])%<span class="number">10</span>;</span><br><span class="line">&#125;  <span class="comment">//计算当前位数字,注意：这条语句与上一条不能交换。</span></span><br><span class="line"><span class="keyword">if</span>(a[k+<span class="number">1</span>]&gt;<span class="number">0</span>) </span><br><span class="line">a[<span class="number">0</span>]=k+<span class="number">1</span>;  <span class="comment">//修正新的a的位数（a+b最多只能的一个进位）</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">a[<span class="number">0</span>]=k;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span><br>注意一定要补0，否侧无法进位！！！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个高精度正整数加法 a+b </span></span><br><span class="line"> <span class="function"><span class="built_in">string</span> <span class="title">stringAddString</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">     <span class="comment">//1、对位，将两个数补零直到其具有相同长度 </span></span><br><span class="line">     <span class="keyword">while</span>(a.length() &lt; b.length())         </span><br><span class="line">         a = <span class="string">'0'</span> + a;</span><br><span class="line">     <span class="keyword">while</span>(a.length() &gt; b.length())</span><br><span class="line">         b = <span class="string">'0'</span> + b; </span><br><span class="line">     <span class="comment">//2、补零，在开头再加一个0以便进位</span></span><br><span class="line">     a = <span class="string">'0'</span> + a;</span><br><span class="line">     b = <span class="string">'0'</span> + b;</span><br><span class="line">     <span class="comment">//3、从低位开始相加，注意进位</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=a.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">         a[i] = a[i] + b[i] - <span class="string">'0'</span>;</span><br><span class="line">         <span class="keyword">if</span>(a[i] &gt; <span class="string">'9'</span>)&#123;</span><br><span class="line">             a[i] = a[i] - <span class="number">10</span>;</span><br><span class="line">             a[i<span class="number">-1</span>] += <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; </span><br><span class="line">     clear(a);</span><br><span class="line">     <span class="keyword">return</span> a;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h1 id="高精度数的减法"><a href="#高精度数的减法" class="headerlink" title="高精度数的减法"></a>高精度数的减法</h1><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gminus</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span>;<span class="comment">//计算a=a-b，返加符号位0:正数 1:负数</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">int</span> flag,i</span><br><span class="line">  flag=compare(a,b); <span class="comment">//调用比较函数判断大小</span></span><br><span class="line"><span class="keyword">if</span> (falg==<span class="number">0</span>)<span class="comment">//相等</span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  <span class="comment">//若a=b，则a=0,也可在return前加一句a[0]=1,表示是 1位数0</span></span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>) <span class="comment">//大于  </span></span><br><span class="line">  &#123;  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">      &#123; </span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">&#123; </span><br><span class="line">a[i+<span class="number">1</span>]--;</span><br><span class="line"></span><br><span class="line">a[i]+=<span class="number">10</span>;</span><br><span class="line">&#125; <span class="comment">//若不够减则向上借一位</span></span><br><span class="line">        a[i]=a[i]-b[i];</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">while</span>(a[a[<span class="number">0</span>]]==<span class="number">0</span>)</span><br><span class="line">a[<span class="number">0</span>]--; <span class="comment">//修正a的位数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">-1</span>)<span class="comment">//小于  则用a=b-a,返回-1</span></span><br><span class="line">    &#123; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=b[<span class="number">0</span>];i++)   </span><br><span class="line">   &#123;  </span><br><span class="line"><span class="keyword">if</span>(b[i]&lt;a[i])</span><br><span class="line">&#123; </span><br><span class="line">b[i+<span class="number">1</span>]--;</span><br><span class="line">b[i]+=<span class="number">10</span>;</span><br><span class="line">&#125; <span class="comment">//若不够减则向上借一位</span></span><br><span class="line">        a[i]=b[i]-a[i];</span><br><span class="line">&#125;</span><br><span class="line">     a[<span class="number">0</span>]=b[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">while</span>(a[a[<span class="number">0</span>]]==<span class="number">0</span>) </span><br><span class="line">a[<span class="number">0</span>]--; <span class="comment">//修正a的位数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span>两个高精度正整数减法 a-b<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">stringSubString</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span>&#123;</span><br><span class="line">      <span class="keyword">bool</span> aBigger = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//1、对位，将两个数补零直到其具有相同长度 </span></span><br><span class="line">      <span class="keyword">while</span>(a.length() &lt; b.length())         </span><br><span class="line">          a = <span class="string">'0'</span> + a;</span><br><span class="line">     <span class="keyword">while</span>(a.length() &gt; b.length())</span><br><span class="line">          b = <span class="string">'0'</span> + b;  </span><br><span class="line">      <span class="comment">//2、推测结果正负值，调整为前大后小 </span></span><br><span class="line">      <span class="keyword">if</span>(a &lt; b)  </span><br><span class="line">      &#123;  </span><br><span class="line">          aBigger = <span class="literal">false</span>;  </span><br><span class="line">          <span class="built_in">string</span> buf = b;  </span><br><span class="line">          b = a;  </span><br><span class="line">          a = buf;  </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">//3、从低位开始相减，注意借位,注意不用函数string是往后插入，然后从0开始，所以i=a.length()-1;</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=a.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">          <span class="keyword">if</span>(a[i] &gt;= b[i])&#123;</span><br><span class="line">              a[i] = a[i] - (b[i] - <span class="string">'0'</span>);</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              a[i] = a[i] + <span class="number">10</span>;</span><br><span class="line">              a[i<span class="number">-1</span>] -= <span class="number">1</span>;</span><br><span class="line">              a[i] = a[i] - (b[i] - <span class="string">'0'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="comment">//4.字符就是int，字符型运算时是用ASCII码运算，</span></span><br><span class="line"><span class="comment">//所以a[i] - b[i]为ASCII相减，此时不为数字字符，所以加上'0'</span></span><br><span class="line"><span class="comment">//保证a[i]为数字字符（string)!!!!!!!!!!!</span></span><br><span class="line">      clear(a);</span><br><span class="line">      <span class="keyword">if</span>(!aBigger)   </span><br><span class="line">          a = <span class="string">'-'</span> + a;</span><br><span class="line"><span class="comment">//string中因为'-'放在前面，所以输出时在前面，前后连接</span></span><br><span class="line">      <span class="keyword">return</span> a;    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="高精度乘法1-高精度乘单精度数，单精度数是指通常的整型数"><a href="#高精度乘法1-高精度乘单精度数，单精度数是指通常的整型数" class="headerlink" title="高精度乘法1(高精度乘单精度数，单精度数是指通常的整型数)"></a>高精度乘法1(高精度乘单精度数，单精度数是指通常的整型数)</h1><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">multi1</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">long</span>  key)</span> <span class="comment">//a=a*key,key是单精度数  </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k;</span><br><span class="line"><span class="keyword">if</span> (key==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">//单独处理key=0</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">a[i]=a[i]*key;<span class="comment">//先每位乘起来</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>]+=a[i]/<span class="number">10</span>;</span><br><span class="line">a[i]%=<span class="number">10</span>;</span><br><span class="line">&#125; <span class="comment">//进位</span></span><br><span class="line"><span class="comment">//注意上一语句退出时i=a[0]+1</span></span><br><span class="line"><span class="keyword">while</span>(a[i]&gt;<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">a[i+<span class="number">1</span>]=a[i]/<span class="number">10</span>;</span><br><span class="line">a[i]=a[i]%<span class="number">10</span>;</span><br><span class="line">i++;</span><br><span class="line">a[<span class="number">0</span>]++;</span><br><span class="line">&#125;  <span class="comment">//继续处理超过原a[0]位数的进位,修正a的位数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span></p><p>待续</p><h1 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h1><ul><li>算法：按照从高位到低位的顺序，逐位相除。在除到第j位时，该位在接受了来自第j+1位的余数后与除数相除，如果最高位为零，则商的长度减一</li></ul><p><span id="inline-toc">1.</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>   N  500</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span>  a[N] = &#123;<span class="number">0</span>&#125;, c[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span>  i, k, d, b;</span><br><span class="line">  <span class="keyword">char</span>  a1[N];  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Input 除数:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Input 被除数:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a1);</span><br><span class="line">  k = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; k; i++)  a[i] = a1[k - i - <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">  d = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">  &#123;</span><br><span class="line">     d = d * <span class="number">10</span> + a[i];</span><br><span class="line">     c[i] = d / b;</span><br><span class="line">     d = d % b;      </span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="keyword">while</span>(c[k - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; k &gt; <span class="number">1</span>)  k--;  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"商="</span>);</span><br><span class="line">  <span class="keyword">for</span>(i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)  <span class="built_in">printf</span>(<span class="string">"%d"</span>, c[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n余数=%d"</span>, d);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><span id="inline-toc">2.</span></p><p>待续</p><p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;前言:由于计算机运算是有模运算,数据范围的表示有一定限制,如整型int(C++中int 与long相同)表达范围是(-2^31~2^31-1),unsigned long(无符号整数)是(0~2^32-1),都约为几十亿.如果采用实数型,则能保存最大的do
      
    
    </summary>
    
      <category term="算法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="高精度算法" scheme="ctguljj.github.io/categories/%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="ctguljj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>char与string转换</title>
    <link href="ctguljj.github.io/2019/03/10/char%E4%B8%8Estring%E8%BD%AC%E6%8D%A2/"/>
    <id>ctguljj.github.io/2019/03/10/char与string转换/</id>
    <published>2019-03-10T03:20:53.000Z</published>
    <updated>2019-03-10T03:40:53.483Z</updated>
    
    <content type="html"><![CDATA[<p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;

      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="string" scheme="ctguljj.github.io/categories/c/string/"/>
    
    
      <category term="c++" scheme="ctguljj.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++find函数</title>
    <link href="ctguljj.github.io/2019/03/09/c-find%E5%87%BD%E6%95%B0/"/>
    <id>ctguljj.github.io/2019/03/09/c-find函数/</id>
    <published>2019-03-09T13:22:53.000Z</published>
    <updated>2019-03-12T10:08:07.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="find函数"><a href="#find函数" class="headerlink" title="find函数"></a>find函数</h1><ul><li><p>find用在容器中更加普遍，而algorithm中其实find函数只是一种</p></li><li><p>C++find函数原型：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"> <span class="title">InputIterator</span> <span class="title">find</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">val</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">while</span> (first!=last) </span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">if</span> (*first==val) <span class="keyword">return</span> first;</span><br><span class="line">     ++first;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line">如果没找到对应的关键元素，会返回end(),最后一个元素的后一位。</span><br></pre></td></tr></table></figure><ul><li>其中，find()算法的前两个参数都是某个容器的迭代器，用于指定查找的起始位置和终止位置；第三个参数就是要查找的内容，它的数据类型跟容器中数据的类型相同。这里需要注意的是，find()算法会利用“==”操作符将这里的目标内容跟容器中的数据元素进行相等比较，以确定某个元素是否符合条件，所以，这里的数据类型必须支持“==”操作符进行相等比较。对于基本数据类型而言，它们已经天然支持无需我们操心，如果是自定义的数据类型，则需要重载“==”操作符以支持相等比较。</li></ul><h2 id="各个容器自己实现的成员函数"><a href="#各个容器自己实现的成员函数" class="headerlink" title="各个容器自己实现的成员函数"></a>各个容器自己实现的成员函数</h2><ul><li>vector没有实现find函数，除此之外，常见容器都实现了自己的find函数，如set，map，string</li><li>String是这一种顺序存储结构，其find函数返回的是下标索引。set,map,multiset,multimap都不是顺序索引的数据结构，所以返回的是迭代器。</li><li>为什么返回的不是索引下标？这是因为索引下标是在数组这种连续存储的数据结构里面常见的，是一种顺序索引；而很多数据结构的存储并非连续的，不能实现顺序索引，为了兼顾所有的数据结构，所以返回的仅仅是指针或是迭代器。<h2 id="如果元素不在"><a href="#如果元素不在" class="headerlink" title="如果元素不在"></a>如果元素不在</h2></li><li>对于返回迭代器的查找，通过判断find（a.begin(),a.end(),value）==a.end()，来判断元素是否存在</li><li>对于string，通过a.find(val)==string::npos判断</li></ul><h1 id="std-map-find"><a href="#std-map-find" class="headerlink" title="std::map::find"></a>std::map::find</h1><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>指向键等于 key 的元素的迭代器。若找不到这种元素，则返回尾后（见 end() ）迭代器。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;find函数&quot;&gt;&lt;a href=&quot;#find函数&quot; class=&quot;headerlink&quot; title=&quot;find函数&quot;&gt;&lt;/a&gt;find函数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;find用在容器中更加普遍，而algorithm中其实find函数只是一种&lt;/p&gt;
&lt;/l
      
    
    </summary>
    
      <category term="c++" scheme="ctguljj.github.io/categories/c/"/>
    
      <category term="常用函数" scheme="ctguljj.github.io/categories/c/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="常用函数" scheme="ctguljj.github.io/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>blog表格</title>
    <link href="ctguljj.github.io/2019/03/09/blog%E8%A1%A8%E6%A0%BC/"/>
    <id>ctguljj.github.io/2019/03/09/blog表格/</id>
    <published>2019-03-09T06:02:45.000Z</published>
    <updated>2019-03-09T06:17:18.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">c</td><td style="text-align:center">d</td></tr></tbody></table><ul><li><p><strong>|、-、:</strong>之间的多余空格会被忽略，不影响布局。<br>默认标题栏居中对齐，内容居左对齐。</p><ul><li>-:表示内容和标题栏居右对齐</li><li>:-表示内容和标题栏居左对齐</li><li>:-:表示内容和标题栏居中对齐。</li></ul></li><li>内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;a&lt;/th&gt;
&lt;th style=&quot;text
      
    
    </summary>
    
      <category term="blog" scheme="ctguljj.github.io/categories/blog/"/>
    
      <category term="表格" scheme="ctguljj.github.io/categories/blog/%E8%A1%A8%E6%A0%BC/"/>
    
    
      <category term="blog" scheme="ctguljj.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>vector简介</title>
    <link href="ctguljj.github.io/2019/03/09/vector%E7%AE%80%E4%BB%8B/"/>
    <id>ctguljj.github.io/2019/03/09/vector简介/</id>
    <published>2019-03-09T06:00:32.000Z</published>
    <updated>2019-03-13T13:00:39.870Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.cppreference.com/w/cpp/container/vector" target="_blank" rel="noopener">cpp</a></p><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><ul><li>vector的底层数据结构是动态数组<h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2></li><li>标准库的实现者使用了这样的内存分配策略：以最小的代价连续存储元素。为了使vector容器实现快速的内存分配，其实际分配的容量要比当前所需的空间多一些(预留空间)，vector容器预留了这些额外的存储区用于存放添加的新元素，于是不必为每个新元素进行一次内存分配。当继续向容器中加入元素导致备用空间被用光（超过了容量 capacity），此时再加入元素时vector的内存管理机制便会扩充容量至两倍，如果两倍容量仍不足，就扩张至足够大的容量。容量扩张必须经历“重新配置、元素移动、释放原空间”这个浩大的工程。</li><li>按照《STL源码剖析》中提供的vector源码，vector的内存配置原则为：<ul><li>如果vector原大小为0，则配置1，也即一个元素的大小。</li><li>如果原大小不为0，则配置原大小的两倍。</li></ul></li><li>当然，vector的每种实现都可以自由地选择自己的内存分配策略，分配多少内存取决于其实现方式，不同的库采用不同的分配策略。</li></ul><h2 id="迭代器失效问题"><a href="#迭代器失效问题" class="headerlink" title="迭代器失效问题"></a>迭代器失效问题</h2><ul><li>vector管理的是连续的内存空间，在容器中插入（或删除）元素时，插入（或删除）点后面的所有元素都需要向后（或向前）移动一个位置，指向发生移动的元素的迭代器都失效。</li><li>随着元素的插入，原来分配的连续内存空间已经不够且无法在原地拓展新的内存空间，整个容器会被copy到另外一块内存上，此时指向原来容器元素的所有迭代器通通失效。</li><li>删除元素后，指向被删除元素的迭代器失效，这是显而易见的。</li></ul><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><ul><li>使用的vector下标必须小于vector.size();如果开始定义vector未指定大小，用数组下标输入不可以，因为vector中无相应元素，没相应内存空间</li></ul><h2 id="初始化大小"><a href="#初始化大小" class="headerlink" title="初始化大小"></a>初始化大小</h2><ul><li>vector<t> v(n,i)形式，v包含n 个值为 i 的元素</t></li><li>v(int n)将容器初始化为有 n 个元素</li><li>vector()无参构造函数，将容器初始化为空</li><li>如果想知道vector是否为空，可以使用empty（），空返回true，否则返回false。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zh.cppreference.com/w/cpp/container/vector&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cpp&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;vector&quot;&gt;&lt;a href=&quot;#vector&quot;
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="vector" scheme="ctguljj.github.io/categories/stl/vector/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>list列表</title>
    <link href="ctguljj.github.io/2019/03/08/list%E5%88%97%E8%A1%A8/"/>
    <id>ctguljj.github.io/2019/03/08/list列表/</id>
    <published>2019-03-08T12:48:34.000Z</published>
    <updated>2019-03-11T10:25:42.519Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://zh.cppreference.com/w/cpp/container/list" target="_blank" rel="noopener">cppreference</a></li></ul><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><ul><li>#include ＜list＞</li></ul><h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><ul><li>list同样是一个模板类，它底层数据结构为双向循环链表。因此，它支持任意位置常数时间的插入/删除操作，不支持快速随机访问。</li><li>双向链表的每个元素中都有一个指针指向后一个元素，也有一个指针指向前一个元素</li></ul><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><ul><li>list的空间配置策略，自然是像我们普通双向链表那样，有多少元素申请多少内存。它不像vactor那样需要预留空间供新元素的分配，也不会因找不到连续的空间而引起整个容器的内存迁移。</li></ul><h2 id="迭代器失效问题"><a href="#迭代器失效问题" class="headerlink" title="迭代器失效问题"></a>迭代器失效问题</h2><ul><li>list 有一个重要性质：插入操作（insert）与接合操作（splice）都不会造成原有的list迭代器失效。这在vector是不成立的，因为vactor的插入可能引起空间的重新配置，导致原来的迭代器全部失效。list的迭代器失效，只会出现在删除的时候，指向删除元素的那个迭代器在删除后失效。<br>通常来说，<code>forward_list</code>在使用灵活度上比不上list，因为它只能单向迭代元素，且提供的接口没有list多。然而，在内存的使用上，它是比list占优势的。当对内存的要求占首要位置时，应该选择<code>forward_list</code>。</li></ul><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><ul><li><p><code>list&lt;int&gt; c;</code>空链表</p></li><li><p><code>list&lt;int&gt; c1(3);</code> 建一个含三个默认值是0的元素的链表　</p></li></ul><ul><li><code>list&lt;int&gt; c2(5,2);</code> 建一个含五个元素的链表，值都是2　</li><li><code>list&lt;int&gt; c4(c2);</code> 建一个c2的copy链表</li></ul><ul><li><p><code>list&lt;int&gt; c5(c1.begin(),c1.end());</code> c5含c1一个区域的元素[_First, _Last)。</p></li><li><p>list 容器不支持根据下标随机存取元素</p></li><li>list 的成员函数 front() 和 back()，可以各自返回第一个和最后一个元素的引用。在空 list 中调用它们中的任意一个，结果是未知的，因此不要这样使用。可以通过迭代器的自增或自减来访问 list 的内部元素。</li></ul><h1 id="List常用操作函数"><a href="#List常用操作函数" class="headerlink" title="List常用操作函数"></a>List常用操作函数</h1><h1 id="list-的特点"><a href="#list-的特点" class="headerlink" title="list 的特点"></a>list 的特点</h1><ul><li>(1) 不使用连续的内存空间这样可以随意地进行动态操作；</li><li>(2) 可以在内部任何位置快速地插入或删除，当然也可以在两端进push 和pop 。</li><li>(3) 不能进行内部的随机访问，即不支持[ ] 操作符和<code>vector.at() ；</code></li><li>(4) 相对于verctor 占用更多的内存。</li><li>有自身的sort函数</li><li>STL 中的算法 sort 可以用来对 vector 和 deque ，string排序，它需要随机访问迭代器的支持。因为 list 不支持随机访问迭代器，所以不能用算法 sort 对 list 容器排序。因此，list 容器引入了 sort 成员函数以完成排序。</li><li>注意<br>std::sort 要求随机访问迭代器且不能用于 list 。此函数与 std::sort 的区别在于，它不要求 list 的元素类型可交换，保留所有迭代器的值，并进行稳定排序。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.cppreference.com/w/cpp/container/list&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cppreference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;list&quot;
      
    
    </summary>
    
      <category term="stl" scheme="ctguljj.github.io/categories/stl/"/>
    
      <category term="list" scheme="ctguljj.github.io/categories/stl/list/"/>
    
    
      <category term="stl" scheme="ctguljj.github.io/tags/stl/"/>
    
  </entry>
  
</feed>
